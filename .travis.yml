language: generic

git:
  depth: 150

branches:
  except:
    - c-master
    - c-3.2

dist: trusty
sudo: false

matrix:
  include:
    # 3 package variants on major Tcl releases mixed with 2 install variants
    # run tests in code coverage mode on first installation variant
    # for each Tcl releases
    - env: CONFIGURE_OPTS='--with-tclsh=tclsh8.4 --disable-compat-version --prefix=/tmp/modules' MAKE_TESTCOVERAGE='y'
           EXTRA_SCRIPT='install -d /tmp/modules/init && install -D -t /tmp/modules/init testsuite/example/modulerc'
      addons:
        apt:
          sources:
            - sourceline: 'ppa:fish-shell/release-2'
          packages:
            - dejagnu
            - python-sphinx
            - bash
            - tcsh
            - ksh
            - zsh
            - fish
            - tcl8.4
            - perl
            - python
            - ruby
            - cmake3
            - r-base-core
    # install configuration file before test to trigger specific behaviors on initialization parts
    - env: CONFIGURE_OPTS='--with-tclsh=tclsh8.5 --disable-compat-version --prefix=/tmp/modules' MAKE_TESTCOVERAGE='y'
           EXTRA_SCRIPT='install -d /tmp/modules/init && install -D -t /tmp/modules/init testsuite/example/modulerc testsuite/example/.modulespath'
      addons:
        apt:
          sources:
            - sourceline: 'ppa:fish-shell/release-2'
          packages:
            - dejagnu
            - python-sphinx
            - bash
            - tcsh
            - ksh
            - zsh
            - fish
            - tcl8.5
            - perl
            - python
            - ruby
            - cmake3
            - r-base-core
    # also enable a display on this test case to validate x-resource behavior
    - env: CONFIGURE_OPTS='--with-tclsh=tclsh8.6 --disable-compat-version --prefix=/tmp/modules' MAKE_TESTCOVERAGE='y'
      before_script:
        - export DISPLAY=:99.0
        - sh -e /etc/init.d/xvfb start
        - sleep 3 # give xvfb some time to start
      addons:
        apt:
          sources:
            - sourceline: 'ppa:fish-shell/release-2'
          packages:
            - dejagnu
            - python-sphinx
            - bash
            - tcsh
            - ksh
            - zsh
            - fish
            - tcl8.6
            - perl
            - python
            - ruby
            - cmake3
            - r-base-core

    - env: CONFIGURE_OPTS='--with-tclsh=tclsh8.4 --prefix=/tmp/modules --enable-compat-version --with-loadedmodules=null:dot'
           EXTRA_SCRIPT='install -d /tmp/modules/init && install -D -t /tmp/modules/init testsuite/example/modulerc'
      addons:
        apt:
          sources:
            - sourceline: 'ppa:fish-shell/release-2'
          packages:
            - dejagnu
            - python-sphinx
            - bash
            - tcsh
            - ksh
            - zsh
            - fish
            - tcl8.4
            - perl
            - python
            - ruby
            - cmake3
            - r-base-core
            # compatibility version build requirements
            - gcc
            - automake
            - autoconf
            - autopoint
            - tcl8.4-dev
    - env: CONFIGURE_OPTS='--with-tclsh=tclsh8.5 --prefix=/tmp/modules --enable-compat-version --with-loadedmodules=null:dot'
           EXTRA_SCRIPT='install -d /tmp/modules/init && install -D -t /tmp/modules/init testsuite/example/modulerc testsuite/example/.modulespath'
      addons:
        apt:
          sources:
            - sourceline: 'ppa:fish-shell/release-2'
          packages:
            - dejagnu
            - python-sphinx
            - bash
            - tcsh
            - ksh
            - zsh
            - fish
            - tcl8.5
            - perl
            - python
            - ruby
            - cmake3
            - r-base-core
            # compatibility version build requirements
            - gcc
            - automake
            - autoconf
            - autopoint
            - tcl8.5-dev
    - env: CONFIGURE_OPTS='--with-tclsh=tclsh8.6 --prefix=/tmp/modules --enable-compat-version --with-loadedmodules=null:dot'
      addons:
        apt:
          sources:
            - sourceline: 'ppa:fish-shell/release-2'
          packages:
            - dejagnu
            - python-sphinx
            - bash
            - tcsh
            - ksh
            - zsh
            - fish
            - tcl8.6
            - perl
            - python
            - ruby
            - cmake3
            - r-base-core
            # compatibility version build requirements
            - gcc
            - automake
            - autoconf
            - autopoint
            - tcl8.6-dev

    # CentOS tests
    - env: OS_NAME=centos OS_VERSION=6 DOCKER_IMAGE=${OS_NAME}:${OS_NAME}${OS_VERSION} CONTAINER=${OS_NAME}${OS_VERSION}
           CMD_PREFIX="docker exec --env RUNTESTFLAGS=-v $CONTAINER"
           CONFIGURE_OPTS='--disable-compat-version'
      sudo: required
      services:
        - docker

    - env: OS_NAME=centos OS_VERSION=7 DOCKER_IMAGE=${OS_NAME}:${OS_NAME}${OS_VERSION} CONTAINER=${OS_NAME}${OS_VERSION}
           CMD_PREFIX="docker exec --env RUNTESTFLAGS=-v $CONTAINER"
           CONFIGURE_OPTS='--disable-compat-version'
      sudo: required
      services:
        - docker

    # also enable a display on this test case to validate x-resource behavior
    - env: OS_NAME=centos OS_VERSION=6 DOCKER_IMAGE=${OS_NAME}:${OS_NAME}${OS_VERSION} CONTAINER=${OS_NAME}${OS_VERSION}
           CMD_PREFIX="docker exec --env RUNTESTFLAGS=-v $CONTAINER xvfb-run"
           CONFIGURE_OPTS='--prefix=/tmp/modules --enable-compat-version --with-loadedmodules=null:dot'
           EXTRA_PKGS='xorg-x11-server-utils xorg-x11-server-Xvfb automake autoconf gettext-devel gcc tcl-devel'
      sudo: required
      services:
        - docker

    - env: OS_NAME=centos OS_VERSION=7 DOCKER_IMAGE=${OS_NAME}:${OS_NAME}${OS_VERSION} CONTAINER=${OS_NAME}${OS_VERSION}
           CMD_PREFIX="docker exec --env RUNTESTFLAGS=-v $CONTAINER xvfb-run"
           CONFIGURE_OPTS='--prefix=/tmp/modules --enable-compat-version --with-loadedmodules=null:dot'
           EXTRA_PKGS='which xorg-x11-server-utils xorg-x11-server-Xvfb automake autoconf gettext-devel gcc tcl-devel'
      sudo: required
      services:
        - docker

    # openSUSE
    - env: OS_NAME=opensuse OS_VERSION=leap DOCKER_IMAGE=${OS_NAME}:${OS_VERSION} CONTAINER=${OS_VERSION}
           CMD_PREFIX="docker exec --env RUNTESTFLAGS=-v $CONTAINER"
           CONFIGURE_OPTS='--disable-compat-version'
      sudo: required
      services:
        - docker

    # also enable a display on this test case to validate x-resource behavior
    - env: OS_NAME=opensuse OS_VERSION=leap DOCKER_IMAGE=${OS_NAME}:${OS_VERSION} CONTAINER=${OS_VERSION}
           CMD_PREFIX="docker exec --env RUNTESTFLAGS=-v $CONTAINER xvfb-run"
           CONFIGURE_OPTS='--prefix=/tmp/modules --enable-compat-version --with-loadedmodules=null:dot'
           EXTRA_PKGS='which xrdb xvfb-run autoconf automake gettext-tools-mini gcc tcl-devel'
      sudo: required
      services:
        - docker



env:
  global:
    - RUNTESTFLAGS='-v'
    - CMD_PREFIX=''
    - EXTRA_PKGS=''

install: true

before_install: |
  if [ -n "$DOCKER_IMAGE" ]; then
    docker pull $DOCKER_IMAGE &&
    docker run --name $CONTAINER --detach --rm -i -t -w /modules $DOCKER_IMAGE /bin/bash
    case "${OS_NAME}" in
      centos)
        if [ $OS_VERSION -eq 6 ]; then SPHINX_PKG='python-sphinx10' MAN_PKG='man'; else SPHINX_PKG='python-sphinx' MAN_PKG='man-db'; fi
        docker exec $CONTAINER yum install -y epel-release &&
        docker exec $CONTAINER yum install -y tcsh zsh ksh tcl perl python ruby cmake R-core make wget perl $SPHINX_PKG git dejagnu $MAN_PKG rpm-build bzip2 $EXTRA_PKGS &&
        docker exec $CONTAINER wget -O /etc/yum.repos.d/shells_fish_release_2.repo http://download.opensuse.org/repositories/shells:fish:release:2/CentOS_${OS_VERSION}/shells:fish:release:2.repo &&
        docker exec $CONTAINER yum install -y fish ;;
      opensuse)
        docker exec $CONTAINER zypper install -y tcsh zsh ksh fish tcl perl python ruby cmake R-core R-core-packages make wget python-Sphinx git dejagnu man net-tools $EXTRA_PKGS ;;
    esac
    docker cp ./. $CONTAINER:modules
  else
    true
  fi

script:
  - $CMD_PREFIX ./configure $CONFIGURE_OPTS
  - $CMD_PREFIX make
  - if [ -n "$EXTRA_SCRIPT" ]; then $CMD_PREFIX $EXTRA_SCRIPT; fi
  - if [ "$MAKE_TESTCOVERAGE" = 'y' ]; then $CMD_PREFIX make testcoverage; fi
  - if [ "$MAKE_TESTCOVERAGE" != 'y' ]; then $CMD_PREFIX make test; fi
  - $CMD_PREFIX make install
  - $CMD_PREFIX make testinstall
  - $CMD_PREFIX make uninstall
  - if [ "$OS_NAME" = 'centos' ]; then $CMD_PREFIX make srpm; fi

# report code coverage results
after_success: |
  [ "$MAKE_TESTCOVERAGE" = 'y' ] &&
  contrib/nglfar2ccov modulecmd.tcl &&
  bash <(curl -s https://codecov.io/bash) -s coverage

after_script: |
  [ -n "$DOCKER_IMAGE" ] &&
  docker stop $CONTAINER
