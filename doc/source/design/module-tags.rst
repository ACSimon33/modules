.. _module-tags:

Module tags
===========

Configuration
-------------

- No specific configuration

Specification
-------------

- Introduce one new modulefile command to set tags on modulefiles: ``module-tag``

    - A tag is a piece of information associated to individual modulefiles
    - That is reported along module name on ``avail`` or ``list`` sub-command results
    - This piece of information could lead to specific behaviors when handling modulefile over the different module sub-commands or modulefile evaluation modes

        - For instance, a module with a ``sticky`` tag set on it cannot be unloaded

- 3 different kind of tag exist:

    - Those inherited from module state, consequence of a specific modulefile command or module action

        - This kind of tag cannot be defined with the ``module-tag`` command

            - An error is returned otherwise
            - Specific modulefile command should be used instead as such tag may have specific properties that should also be defined along
            - Easier for everybody to only have one way to define such tags and not 2 different commands

        - Every tag holding specific properties should have its dedicated modulefile command to define it

    - Those set with ``module-tag`` that lead to a specific behavior
    - Those set with ``module-tag`` that are purely informational, no specific behavior

- Tags inherited from module state:

    - ``hidden``: module not visible, not reported by default in ``avail`` result (tag acquired through ``module-hide``)
    - ``forbidden``: module that cannot be loaded (tag acquired through ``module-forbid``)
    - ``nearly-forbidden``: module that soon cannot be loaded (tag acquired through ``module-forbid``)
    - ``loaded``: loaded module
    - ``auto-loaded``: module automatically loaded by another module

- Tags set with ``module-tag`` associated to a specific behavior:

    - ``sticky``: loaded module cannot be unloaded unless forced
    - ``super-sticky``: loaded module cannot be unloaded even if forced
    - ``hidden-loaded``: loaded module not reported by default in ``list`` result

- Modules project may introduce in the future new tags inherited from new states or new specific behaviors

    - These new tags will supersede tags set by users using the same naming


Defining
^^^^^^^^

- ``module-tag [options] tag modspec...``

    - Apply ``tag`` to all modules matching ``modspec`` module specification
    - :ref:`advanced-module-version-specifiers` are supported if relative module option is enabled
    - Full path module specification is not supported, as modulerc are not evaluated when reaching a modulefile specified as full path
    - One tag could be applied to multiple module specifications with a single ``module-tag`` command call

- ``module-tag`` accepts the following options:

    - ``--not-user``: specify a list of users unaffected by specified tagging
    - ``--not-group``: specify a list of groups whose member are unaffected by specified tagging

- ``--not-user`` and ``--not-group`` specification is only supported on Unix platform

    - These 2 options raise an error when used on Windows platform
    - In which case relative ``module-tag`` command is made ineffective as well as remaining content of the modulerc script hosting them
    - Error message is clearly seen when trying to load related modules and indicate where to find the erroneous command

- ``module-tag`` is intended to be used in modulerc files

    - to be easily fetched during ``avail`` sub-command processing
    - they also need to be enabled in modulefile context as global/user rc files are evaluated as modulefile, not modulerc
    - it enables to dissociate environment changes described in the modulefile from the properties of this modulefile

        - as these properties are usually site-specific
        - and modulefile are automatically generated by a build tool
        - but properties are not always related and set by the build tool


Persistency
^^^^^^^^^^^

- The ``MODULES_LMTAG`` environment variable holds all tag information applying to loaded modules

    - Following the same syntax scheme than ``MODULES_LMCONFLICT``
    - For instance ``module/vers&tag&tag:module2&tag``

- The ``loaded`` tag is not recorded in ``MODULES_LMTAG`` environment variable

    - As it obviously applies to all loaded modules defined in ``LOADEDMODULES`` environment variable

- The ``auto-loaded`` tag is not recorded in ``MODULES_LMTAG`` environment variable

    - Auto loaded modules are currently listed in the ``MODULES_LMNOTUASKED`` environment variable


Reporting
^^^^^^^^^

- Defined tags are reported on ``avail`` and ``list`` sub-command results

    - Reported along modulefile name, within angle brackets (following the HTML tag fashion)
    - Each tag separated by a colon
    - For instance ``module/version <tag1:tag2>``
    - Tags are right-aligned on each column
    - One space character at least separates module name and version or list of symbolic version from tag list

- Tags applying to module alias are reported on ``avail`` reports only

    - Where the module alias stands for itself in the report
    - On ``list`` reports, alias is reported along its modulefile target

        - So the tags applying to the alias are not reported
        - Also these tags of the alias are not inherited by alias' target

- Tags applying to symbolic version are never reported

    - As symbols are never reported alone on ``avail`` or ``list`` reports
    - Always reported along their modulefile target
    - Also these tags of the symbolic versions are not inherited by symbol's target

- Tags applying to symbolic version or module alias are not

- Adding ``tag`` to the list of values of the ``avail_output`` module configuration makes ``avail`` sub-command reports defined tags

    - ``avail_output`` value is a list of strings separated by space character
    - This new configuration will be set to ``header modulepath alias dirwsym sym tag`` by default
    - It will control displayed elements for regular, terse and long outputs
    - ``avail_output`` supersedes ``avail_report_dir_sym`` and ``avail_report_mfile_sym`` configurations

        - Enabled ``avail_report_dir_sym`` corresponds to adding ``dirsym`` value to ``avail_output``
        - Enabled ``avail_report_mfile_sym`` corresponds to adding ``sym`` value to ``avail_output``
        - Both ``avail_report_dir_sym`` and ``avail_report_mfile_sym`` could be removed safely as:

            - it was not possible to define them at configure time
            - or change default value with an environment variable

    - When set via ``config`` sub-command, ``MODULES_AVAIL_OUTPUT`` environment variable is set

        - which supersedes default ``avail_output`` configuration value

    - Can also be set via ``-o``/``--output`` command-line switch

        - which supersedes ``MODULES_AVAIL_OUTPUT`` environment variable if set
        - and default ``avail_output`` configuration value

- Adding ``tag`` to the list of values of the ``list_output`` module configuration makes ``list`` sub-command reports defined tags

    - ``list_output`` value is a list of strings separated by space character
    - This new configuration will be set to ``header sym tag`` by default

    - When set via ``config`` sub-command, ``MODULES_LIST_OUTPUT`` environment variable is set

        - which supersedes default ``list_output`` configuration value

    - Can also be set via ``-o``/``--output`` command-line switch

        - which supersedes ``MODULES_LIST_OUTPUT`` environment variable if set
        - and default ``list_output`` configuration value

- Adding ``legend`` to the list of values of the ``avail_output`` or ``list_output`` configuration options prints a legend to explain output

    - Meaning of ``()`` or ``<>`` is explained
    - Default version is colored specifically
    - Every tag shortened to a defined abbreviation
    - Every tag colored specifically
    - Legend entries only concern elements that can be found in reported output
    - Legend entries are not reported on JSON output mode

- Adding ``autosym`` to the list values of:

    - the ``list_output`` configuration option prints the auto symbols applying to loaded modules
    - the ``avail_output`` configuration option prints the auto symbols applying to available modules

- Some tags are not reported on ``avail`` output:

    - ``hidden-loaded``: correspond to hiding module from loaded list, not from available list

- The ``auto-loaded`` tag is reported on ``avail`` output but will use by default the same acronym than ``loaded`` tag

    - To apply same report for both kind of loaded modules by default
    - It is up to the site to decide if it wants to distinguish the output of the 2 kinds

- Some tags are not reported on ``list`` output:

    - ``loaded``: as every modules reported on ``list`` are loaded
    - ``forbidden``: forbidden module cannot be loaded, so it cannot be found among loaded module list
    - ``hidden``: correspond to hiding module from availabilities, not from loaded list

- When reported in JSON output format

    - tags are listed under the ``tags`` key
    - only keys relative to element listed in ``avail_output``/``list_output`` configuration are produced

        - for instance if the ``sym`` value is not set in ``list_output`` configuration, listed loaded modules do not have a ``symbols`` key in their JSON output entry

- Default ``--long`` report does not contain tag information

    - Not to exceed the 80-column output limit by default

Querying
^^^^^^^^

- The ``tags`` sub-command of ``module-info`` modulefile command enables modulefile to know what tags apply to itself

    - ``module-info tags`` returns a list of all the tags applying to currently evaluated module
    - an empty list is returned when called from a modulerc evaluation context or if no tag applies to current modulefile

- Tags cannot be queried to select modules

    - Symbolic versions or variants can be used to select modules
