.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MODULE 1"
.TH MODULE 1 "2014-06-11" "modules-tcl" "Environment Modules"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
module \- command interface to the Modules package
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
module [switches] [[sub\-command] [sub\-command\-args]]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBmodule\fR is a user interface to the Modules package.  The Modules package 
provides for the dynamic modification of the user's environment via \fImodulefiles\fR.
.PP
Each \fImodulefile\fR contains the information needed to configure the shell for
an application.  Once the Modules package is initialized, the environment can
be modified on a per-module basis using the \fBmodule\fR command which interprets
\&\fImodulefiles\fR.  Typically \fImodulefiles\fR instruct the \fBmodule\fR command to
alter or set shell environment variables such as \s-1PATH\s0, \s-1MANPATH\s0, etc.
\&\fIModulefiles\fR may be shared by many users on a system and users may have
their own collection to supplement or replace the shared \fImodulefiles\fR.
.PP
The \fImodulefiles\fR are added to and removed from the current environment by 
the user.  The environment changes contained in a \fImodulefile\fR can be 
summarized through the \fBmodule\fR command as well.
If no arguments are given, a summary of the \fBmodule\fR usage and \fIsub-commands\fR
are shown.
.PP
The action for the \fBmodule\fR command to take is described by the \fIsub-command\fR
and its associated arguments.
.SS "Package Initialization"
.IX Subsection "Package Initialization"
The Modules package and the \fBmodule\fR command are initialized when a 
shell-specific initialization script is sourced into the shell.
The script creates the \fBmodule\fR command as either an alias or function,
creates Modules environment variables, and a snapshot of the environment
is saved in ${\s-1HOME\s0}/.modulesbeginenv.  The \fBmodule\fR alias or function
executes the \fBmodulecmd.tcl\fR program located in ${\s-1MODULESHOME\s0}/ and has the
shell evaluate the command's output.  The first argument to \fBmodulecmd.tcl\fR
specifies the type of shell.
.PP
The initialization scripts are kept in ${\s-1MODULESHOME\s0}/init/[shellname]
where [shellname] is the name of the sourcing shell.  For example, a C Shell
user sources the ${\s-1MODULESHOME\s0}/init/csh script.  The sh, csh, tcsh, bash,
ksh, and zsh shells are supported by \fBmodulecmd.tcl\fR.  In addition, python and
perl \*(L"shells\*(R" are supported which writes the environment changes to stdout
as python or perl code.
.SS "Examples of initialization"
.IX Subsection "Examples of initialization"
In the following examples, replace ${\s-1MODULESHOME\s0} with the actual directory
name.
.PP
C Shell initialization (and derivatives):
        source ${\s-1MODULESHOME\s0}/init/csh
        module load modulefile modulefile ...
.PP
Bourne Shell (sh) (and derivatives):
        . ${\s-1MODULESHOME\s0}/init/sh
        module load modulefile modulefile ...
.PP
Perl:
        require \*(L"${\s-1MODULESHOME\s0}/init/perl\*(R";
        &module(\*(L"load modulefile modulefile ...\*(R");
.SS "Modulecmd startup"
.IX Subsection "Modulecmd startup"
Upon invocation \fBmodulecmd.tcl\fR sources rc files which contain global, user
and \fImodulefile\fR specific setups. These files are interpreted as 
\&\fImodulefiles\fR.  See \fI\fImodulefile\fI\|(4)\fR for detailed information.
.PP
Upon invocation of \fBmodulecmd.tcl\fR module \s-1RC\s0 files are sourced in the
following order:
.PP
.Vb 2
\&        Global RC file as specified by ${MODULERCFILE} or 
\&                ${MODULESHOME}/etc/rc
\&
\&        User specific module RC file ${HOME}/.modulerc
\&
\&        All .modulerc and .version files found during I<modulefile>
\&                seeking.
.Ve
.SS "Command line switches"
.IX Subsection "Command line switches"
The \fBmodule\fR command accepts command line switches as its first parameter.
These may be used to control output format of all information displayed and
the \fBmodule\fR behavior in case of locating and interpreting \fImodulefiles\fR.
.PP
All switches may be entered either in short or long notation. The following
switches are accepted:
.PP
\fI\-\-terse, \-t\fR
.IX Subsection "--terse, -t"
.PP
Display \fBavail\fR and \fBlist\fR output in short format.
.PP
\fI\-\-long, \-l\fR
.IX Subsection "--long, -l"
.PP
Display \fBavail\fR and \fBlist\fR output in long format.
.SS "Module Sub-Commands"
.IX Subsection "Module Sub-Commands"
\fIhelp [modulefile...]\fR
.IX Subsection "help [modulefile...]"
.PP
Print the usage of each sub-command.
If an argument is given, print the Module specific help information for the
modulefile.
.PP
\fIload modulefile [modulefile...]\fR
.IX Subsection "load modulefile [modulefile...]"
.PP
\fIadd modulefile [modulefile...]\fR
.IX Subsection "add modulefile [modulefile...]"
.PP
Load modulefile into the shell environment.
.PP
\fIunload modulefile [modulefile...]\fR
.IX Subsection "unload modulefile [modulefile...]"
.PP
\fIrm modulefile [modulefile...]\fR
.IX Subsection "rm modulefile [modulefile...]"
.PP
Remove modulefile from the shell environment.
.PP
\fIswitch modulefile1 modulefile2\fR
.IX Subsection "switch modulefile1 modulefile2"
.PP
\fIswap modulefile1 modulefile2\fR
.IX Subsection "swap modulefile1 modulefile2"
.PP
Switch loaded modulefile1 with modulefile2
.PP
\fIdisplay modulefile [modulefile...]\fR
.IX Subsection "display modulefile [modulefile...]"
.PP
\fIshow modulefile [modulefile...]\fR
.IX Subsection "show modulefile [modulefile...]"
.PP
Display information about a modulefile.
The display sub-command will list the full path of the modulefile
and all (or most) of the environment changes the modulefile
will make if loaded.  (It will not display any
environment changes found within conditional statements.)
.PP
\fIlist\fR
.IX Subsection "list"
.PP
List loaded modules.
.PP
\fIavail [path...]\fR
.IX Subsection "avail [path...]"
.PP
List all available modulefiles in the current \es\-1MODULEPATH\es0.
All directories in the \es\-1MODULEPATH\es0 are recursively searched for
files containing the modulefile magic cookie.  If an argument is
given, then each directory in the \es\-1MODULEPATH\es0 is searched for 
modulefiles whose pathname match the argument.
Multiple versions of an application can be supported by creating a
subdirectory for the application containing modulefiles for each
version.
.PP
\fIuse directory [directory...]\fR
.IX Subsection "use directory [directory...]"
.PP
\fIuse [\-a|\-\-append] directory [directory...]\fR
.IX Subsection "use [-a|--append] directory [directory...]"
.PP
Prepend directory to the \es\-1MODULEPATH\es0 environment variable.
The \-\-append flag will append the directory to \es\-1MODULEPATH\es0.
.PP
\fIunuse directory [directory...]\fR
.IX Subsection "unuse directory [directory...]"
.PP
Remove directory from the \es\-1MODULEPATH\es0 environment variable.
.PP
\fIupdate\fR
.IX Subsection "update"
.PP
Attempt to reload all loaded modulefiles.  The environment will be
reconfigured to match the saved .I ${\es\-1HOME\es0}/.modulesbeginenv
and the modulefiles will be reloaded.  update will only change the
environment variables that the modulefiles set.
.PP
\fIclear\fR
.IX Subsection "clear"
.PP
Force the Modules Package to believe that no modules are currently loaded.
.PP
\fIpurge\fR
.IX Subsection "purge"
.PP
Unload all loaded modulefiles.
.PP
\fIwhatis [modulefile [modulefile...]]\fR
.IX Subsection "whatis [modulefile [modulefile...]]"
.PP
Display the modulefile information set up by the \efImodule\-whatis\efP
commands inside the specified modulefiles. If no modulefiles are
specified all whatis information lines will be shown.
.PP
\fIapropos string\fR
.IX Subsection "apropos string"
.PP
\fIkeyword string\fR
.IX Subsection "keyword string"
.PP
Seeks thru the whatis informations of all modulefiles for the
specified string.  All module whatis informations matching the
string search will be displayed.
.PP
\fIinitadd modulefile [modulefile...]\fR
.IX Subsection "initadd modulefile [modulefile...]"
.PP
Add modulefile to the shell's initialization file in the user's
home directory.  The startup files checked are .cshrc, .login,
and .csh_variables for the C Shell;
\&.profile for the Bourne and Korn Shells; .bashrc, .bash_env, 
and .bash_profile for the \s-1GNU\s0 Bourne Again Shell;
\&.zshrc, .zshenv, and .zlogin for zsh. The .modules file is checked
for all shells.
.PP
If a 'module load' line is found in any of these files, the
modulefile(s) is(are) appended to any existing list of modulefiles.
The 'module load' line must be located in at least one of the
files listed above for any of the 'init' sub-commands to work properly.
If the 'module load' line is found in multiple shell initialization
files, all of the lines are changed.
.PP
\fIinitprepend modulefile [modulefile...]\fR
.IX Subsection "initprepend modulefile [modulefile...]"
.PP
Does the same as initadd but prepends the given modules to the
beginning of the list.
.PP
\fIinitrm modulefile [modulefile...]\fR
.IX Subsection "initrm modulefile [modulefile...]"
.PP
Remove modulefile from the shell's initialization files.
.PP
\fIinitswitch modulefile1 modulefile2\fR
.IX Subsection "initswitch modulefile1 modulefile2"
.PP
Switch modulefile1 with modulefile2 in the shell's initialization files.
.PP
\fIinitlist\fR
.IX Subsection "initlist"
.PP
List all of the modulefiles loaded from the shell's initialization file.
.PP
\fIinitclear\fR
.IX Subsection "initclear"
.PP
Clear all of the modulefiles from the shell's initialization files.
.SH "Modulefiles"
.IX Header "Modulefiles"
modulefiles are written in the Tool Command Language (tcl) and are
interpreted by modulecmd. modulefiles can use conditional statements.
Thus the effect a modulefile will have on the environment may change depending
upon the current state of the environment.
.PP
Environment variables are unset when unloading a modulefile.  Thus, it is
possible to load a modulefile and then unload it without having the
environment variables return to their prior state.
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
.SS "\s-1MODULESHOME\s0"
.IX Subsection "MODULESHOME"
The location of the master Modules package file directory containing
module command initialization scripts, the executable program modulecmd,
and a directory containing a collection of master modulefiles.
.SS "\s-1MODULEPATH\s0"
.IX Subsection "MODULEPATH"
The path that the module command searches when looking for modulefiles.
Typically, it is set to the master modulefiles directory,
${\s-1MODULESHOME\s0}/modulefiles, by the initialization script.
\&\s-1MODULEPATH\s0 can be set using 'module use' or by the module
initialization script to search group or personal modulefile
directories before or after the master modulefile directory.
.SS "\s-1LOADEDMODULES\s0"
.IX Subsection "LOADEDMODULES"
A colon separated list of all loaded modulefiles.
.SS "_LOADED_MODULEFILES_"
.IX Subsection "_LOADED_MODULEFILES_"
A colon separated list of the full pathname for all loaded modulefiles.
.SS "_MODULESBEGINENV_"
.IX Subsection "_MODULESBEGINENV_"
The filename of the file containing the initialization environment snapshot.
.SH "FILES"
.IX Header "FILES"
.SS "/soft/rko\-modules/3.1.6"
.IX Subsection "/soft/rko-modules/3.1.6"
The \s-1MODULESHOME\s0 directory.
.SS "${\s-1MODULESHOME\s0}/etc/rc"
.IX Subsection "${MODULESHOME}/etc/rc"
The system-wide modules rc file.  The location of this file can be changed
using the \s-1MODULERCFILE\s0 environment variable as described above.
.SS "${\s-1HOME\s0}/.modulerc"
.IX Subsection "${HOME}/.modulerc"
The user specific modules rc file.
.SS "${\s-1MODULESHOME\s0}/modulefiles"
.IX Subsection "${MODULESHOME}/modulefiles"
The directory for system-wide modulefiles.  The location of the directory
can be changed using the \s-1MODULEPATH\s0 environment variable as described above.
.SS "${\s-1MODULESHOME\s0}/bin/modulecmd"
.IX Subsection "${MODULESHOME}/bin/modulecmd"
The modulefile interpreter that gets executed upon each invocation of module.
.SS "${\s-1MODULESHOME\s0}/init/shellname"
.IX Subsection "${MODULESHOME}/init/shellname"
The Modules package initialization file sourced into the user's environment.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fImodulefile\fR\|(4)
