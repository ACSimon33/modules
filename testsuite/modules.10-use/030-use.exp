##############################################################################
#   Modules Revision 3.0
#   Providing a flexible user environment
#
#   File:		modules.10-use/%M%
#   Revision:		%I%
#   First Edition:	95/12/06
#   Last Mod.:		%U%, %G%
#
#   Authors:		Jens Hamisch, Jens.Hamisch@Strawberry.COM
#
#   Description:	Testuite testsequence
#   Command:		use -append
#   Sub-Command:
#
#   Comment:	%C{
#			Check appending a new path to the current lists of
#			module paths.
#		}C%
#
##############################################################################

#
# Variables for this test
#

set path "$env(TESTSUITEDIR)/modulefiles.other"
set tsdirname [file tail $env(TESTSUITEDIR)]
regsub "^.*/$tsdirname" $path "$tsdirname" relpath
set badpath "$env(TESTSUITEDIR)/modulefiles.bad"
set mod_path "$path:$env(MODULEPATH)"
set bad_use "$error_msgs: Directory '$badpath' not found"
set empty_use "$error_msgs: Directory '' not found"
set loaded_path "$env(TESTSUITEDIR)/modulefiles"
regsub "^.*/$tsdirname" $loaded_path "$tsdirname" loaded_relpath
regsub "$tsdirname" $loaded_relpath "$tsdirname/../$tsdirname/./" loaded_relpath_wdot
set path_list_header "Search path for module files (in search order):"
set no_path_list "$warn_msgs: No directories on module search path"

set use	"use"

#
# The tests ...
#

lappend ans [list setpath MODULEPATH $mod_path]
test_cmd_re "ALL" "$use $path" $ans

#
# test if use relative-path directory
# should end with same absolute-path result as above
#

test_cmd_re "ALL" "$use $relpath" $ans

#
# test if use non-existent modulefile directory
#

testerr_cmd_re "ALL" "$use $badpath" "$bad_use"

#
# test with uninitialized MODULEPATH
#

if { $verbose > 0 } {
    send_user "\tSetup MODULEPATH = ''\n"
}

set ORIG $::env(MODULEPATH)
set ::env(MODULEPATH) ""

set ans [list]
lappend ans [list setpath MODULEPATH $path]
test_cmd_re "ALL" "$use $path" $ans

# list currently enabled paths
testouterr_cmd "ALL" "$use" "OK" "$no_path_list"

if { $verbose > 0 } {
    send_user "\tRestore MODULEPATH = $ORIG\n"
}
set ::env(MODULEPATH) $ORIG

#
# test with already loaded path
# re-export and increase reference count (C version does no modification)
#
set ans [list]
lappend ans [list set MODULEPATH_modshare "(.*):2"]
lappend ans [list set MODULEPATH $loaded_path]
test_cmd_re "ALL" "$use $loaded_path" $ans

#
# test with already loaded path, but specified as relative-path
# should end with same absolute-path result as above
#
test_cmd_re "ALL" "$use $loaded_relpath" $ans

#
# test with already loaded path, but specified as relative-path with useless "." and ".." components
# should end with same absolute-path result as above
#
test_cmd_re "ALL" "$use $loaded_relpath_wdot" $ans

#
# List enabled paths with 2 paths set
#

if { $verbose > 0 } {
    send_user "\tSetup MODULEPATH = '$mod_path'\n"
}
set ORIG $::env(MODULEPATH)
set ::env(MODULEPATH) "$mod_path"

# list currently enabled paths
testouterr_cmd "ALL" "$use" "OK" "$path_list_header\n  $path\n  $ORIG"

if { $verbose > 0 } {
    send_user "\tRestore MODULEPATH = $ORIG\n"
}
set ::env(MODULEPATH) $ORIG

#
# Test to add an empty path
#

testouterr_cmd "ALL" "$use " "ERR" "$empty_use"


#
#
# Cleanup
#

unset path
unset tsdirname
unset relpath
unset mod_path
unset use
unset badpath
unset bad_use
unset empty_use
unset loaded_path
unset loaded_relpath
unset loaded_relpath_wdot
unset ORIG
unset ans
unset path_list_header
unset no_path_list
