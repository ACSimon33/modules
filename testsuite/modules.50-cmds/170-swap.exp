##############################################################################
#   Modules Revision 3.0
#   Providing a flexible user environment
#
#   File:		modules.50-cmds/%M%
#   Revision:		%I%
#   First Edition:	2001/07/25
#   Last Mod.:		%U%, %G%
#
#   Authors:		R.K. Owen, <rk@owen.sj.ca.us>
#
#   Description:	Testuite testsequence
#   Command:		swap
#   Modulefiles:	loc_dv1/1.0, loc_dv1/2.0, 
#   			loc_dv2/1.0, loc_dv2/2.0, 
#   			loc_dv3/1.0, loc_dv3/2.0,
#               append, bad, module
#   Sub-Command:
#
#   Comment:	%C{
#			Tests the 'swap' module subcommand for all allowed
#			shell types.
#		}C%
#
##############################################################################

set mod1name "loc_dv1"
set mod11 "loc_dv1/1.0"
set mod12 "loc_dv1/2.0"
set mod2name "loc_dv2"
set mod21 "loc_dv2/1.0"
set mod22 "loc_dv2/2.0"
set mod31 "loc_dv3/1.0"
set mod32 "loc_dv3/2.0"

set mod11p "$modpath/$mod11"
set mod12p "$modpath/$mod12"
set mod21p "$modpath/$mod21"
set mod22p "$modpath/$mod22"
set mod31p "$modpath/$mod31"
set mod32p "$modpath/$mod32"

set module "$mod11:$mod21:$mod31"
set modulefile "$mod11p:$mod21p:$mod31p"

set mod100 "append/0.2"
set mod100p "$modpath/$mod100"
set mod101 "bad2/body"
set mod101p "$modpath/$mod101"
set mod102 "NonExistant"
set mod102p "$modpath/$mod102"
set mod103 "module/err"
set mod103p "$modpath/$mod103"
set mod104 "module/bad"
set mod104p "$modpath/$mod104"
set mod105 "module/unk"
set mod105p "$modpath/$mod105"
set mod106 "module/lerr"
set mod106p "$modpath/$mod106"
set mod107 "module/lbad"
set mod107p "$modpath/$mod107"
set mod108 "module/lunk"
set mod108p "$modpath/$mod108"

set mod100err "$moderr_msgs: add-path cannot handle path equals to separator string\n  In '$mod100p'\n$err_contact"
set mod101err "$moderr_msgs: invalid command name \"bad-command\"\n  In '$mod101p'\n$err_contact"
set mod102err "$err_path'$mod102'"
set mod100errun "$moderr_msgs: unload-path cannot handle path equals to separator string\n  In '$mod100p'\n$err_contact"
set mod101errun $mod101err
set mod102errun "$err_file'$mod102p'"

#
# set up the environment
#
set env(_LMFILES_) "$modulefile"
set env(LOADEDMODULES) "$module"

#
#  Swap the 1st in list
#  For the different shells ...
#

# different behavior than C-version: on Tcl-version loaded module does
# not get back the position of the module it replaces. the loaded module
# is appended to the end of the module list
set module "$mod21:$mod31:$mod12"
set modulefile "$mod21p:$mod31p:$mod12p"

lappend ans [list setpath LOADEDMODULES $module]
lappend ans [list setpath _LMFILES_ $modulefile]

#
#  The tests
#

test_cmd_re "ALL" "swap $mod11 $mod12" $ans

#
#  Test the one argument form.
#

test_cmd_re "ALL" "swap $mod12" $ans

#
#  Swap the 2nd in list
#  For the different shells ...
#

# different behavior than C-version: same remark than above
set module "$mod11:$mod31:$mod22"
set modulefile "$mod11p:$mod31p:$mod22p"

set ans [list]
lappend ans [list setpath LOADEDMODULES $module]
lappend ans [list setpath _LMFILES_ $modulefile]

#
#  The tests
#

test_cmd_re "ALL" "swap $mod21 $mod22" $ans

#
#  Test the one argument form.
#

test_cmd_re "ALL" "swap $mod22" $ans

#
#  Swap the last in list
#  For the different shells ...
#

set module "$mod11:$mod21:$mod32"
set modulefile "$mod11p:$mod21p:$mod32p"

set ans [list]
lappend ans [list setpath LOADEDMODULES $module]
lappend ans [list setpath _LMFILES_ $modulefile]

#
#  The tests
#

test_cmd_re "ALL" "swap $mod31 $mod32" $ans

#
#  Test the one argument form.
#

test_cmd_re "ALL" "swap $mod32" $ans

#
#  Test with module to unload equal to module to load
#

set ans [list]
lappend ans [list setpath LOADEDMODULES "$mod11:$mod21:$mod31:$mod32"]
lappend ans [list setpath _LMFILES_ "$mod11p:$mod21p:$mod31p:$mod32p"]

# module to unload is not loaded and closest module (mod31) should not be unloaded
test_cmd_re "sh" "swap $mod32 $mod32" $ans

#
# Test swapping-off module not loaded or swapping-on module already loaded
#

set env(_LMFILES_) ""
set env(LOADEDMODULES) ""

set ans [list]
lappend ans [list setpath LOADEDMODULES "$mod21"]
lappend ans [list setpath _LMFILES_ "$mod21p"]

# module to unload exists but is not loaded, just load
testouterr_cmd_re "sh" "swap $mod11 $mod21" $ans ""

set env(_LMFILES_) "$mod11p:$mod21p"
set env(LOADEDMODULES) "$mod11:$mod21"

# module to load is already loaded, just unload
testouterr_cmd_re "sh" "swap $mod11 $mod21" $ans ""

set env(_LMFILES_) "$mod21p"
set env(LOADEDMODULES) "$mod21"

# module to unload exists but is not loaded and module to load is already loaded, nothing to do
testouterr_cmd "sh" "swap $mod11 $mod21" "OK" ""


#
# Test to swap-off module with issue, nothing unloads
#

set env(_LMFILES_) "$mod100p"
set env(LOADEDMODULES) "$mod100"
testouterr_cmd "sh" "swap $mod100 $mod11" "ERR" "$mod100errun"

set env(_LMFILES_) "$mod101p"
set env(LOADEDMODULES) "$mod101"
testouterr_cmd "sh" "swap $mod101 $mod11" "ERR" "$mod101errun"

set env(_LMFILES_) "$mod102p"
set env(LOADEDMODULES) "$mod102"
testouterr_cmd "sh" "swap $mod102 $mod11" "ERR" "$mod102errun"

set env(_LMFILES_) "$mod100p:$mod103p"
set env(LOADEDMODULES) "$mod100:$mod103"
testouterr_cmd "sh" "swap $mod103 $mod11" "ERR" "$mod100errun"

set env(_LMFILES_) "$mod101p:$mod104p"
set env(LOADEDMODULES) "$mod101:$mod104"
testouterr_cmd "sh" "swap $mod104 $mod11" "ERR" "$mod101errun"

set env(_LMFILES_) "$mod102p:$mod105p"
set env(LOADEDMODULES) "$mod102:$mod105"
testouterr_cmd "sh" "swap $mod105 $mod11" "ERR" "$mod102errun"

set env(_LMFILES_) "$mod100p:$mod103p:$mod106p"
set env(LOADEDMODULES) "$mod100:$mod103:$mod106"
testouterr_cmd "sh" "swap $mod106 $mod11" "ERR" "$mod100errun"

set env(_LMFILES_) "$mod101p:$mod104p:$mod107p"
set env(LOADEDMODULES) "$mod101:$mod104:$mod107"
testouterr_cmd "sh" "swap $mod107 $mod11" "ERR" "$mod101errun"

set env(_LMFILES_) "$mod102p:$mod105p:$mod108p"
set env(LOADEDMODULES) "$mod102:$mod105:$mod108"
testouterr_cmd "sh" "swap $mod108 $mod11" "ERR" "$mod102errun"

#
# Test to swap-on module with issue, nothing loads
#

set env(_LMFILES_) "$mod11p"
set env(LOADEDMODULES) "$mod11"

set ans [list]
lappend ans [list ERR]
lappend ans [list unsetpath _LMFILES_]
lappend ans [list unsetpath LOADEDMODULES]

set ans2 [list]
lappend ans2 [list ERR]
lappend ans2 [list unsetpath LOADEDMODULES]
lappend ans2 [list unsetpath _LMFILES_]


testouterr_cmd "sh" "swap $mod11 $mod100" $ans "$mod100err"
testouterr_cmd "sh" "swap $mod11 $mod101" $ans "$mod101err"
testouterr_cmd "sh" "swap $mod11 $mod102" $ans2 "$mod102err"
testouterr_cmd "sh" "swap $mod11 $mod103" $ans "$mod100err"
testouterr_cmd "sh" "swap $mod11 $mod104" $ans "$mod101err"
testouterr_cmd "sh" "swap $mod11 $mod105" $ans "$mod102err"
testouterr_cmd "sh" "swap $mod11 $mod106" $ans "$mod100err"
testouterr_cmd "sh" "swap $mod11 $mod107" $ans "$mod101err"
testouterr_cmd "sh" "swap $mod11 $mod108" $ans "$mod102err"

#
# Test to swap with full path modulefiles
#

set env(_LMFILES_) "$mod11p"
set env(LOADEDMODULES) "$mod11p"

set ans [list]
lappend ans [list setpath LOADEDMODULES $mod12p]
lappend ans [list setpath _LMFILES_ $mod12p]

testouterr_cmd "sh" "swap $mod11p $mod12p" $ans ""

set env(_LMFILES_) "$mod12p"
set env(LOADEDMODULES) "$mod12p"

testouterr_cmd "sh" "swap $mod11p $mod12p" "OK" ""

testouterr_cmd "sh" "swap $modpath/unknown $mod100p" "ERR" "$err_file'$modpath/unknown'"

testouterr_cmd "sh" "swap $mod11p $mod100p" "ERR" "$mod100err"


# swap with full path modulefiles modules loaded short path
set env(_LMFILES_) "$mod11p:$mod21p"
set env(LOADEDMODULES) "$mod11:$mod21"

set ans [list]
lappend ans [list setpath LOADEDMODULES $mod21]
lappend ans [list setpath _LMFILES_ $mod21p]
testouterr_cmd "sh" "swap $mod11p $mod21p" $ans ""

# one name rule
set ans [list]
lappend ans [list setpath LOADEDMODULES $mod21:$mod12p]
lappend ans [list setpath _LMFILES_ $mod21p:$mod12p]
testouterr_cmd_re "sh" "swap $mod12p" $ans ""

set ans [list]
lappend ans [list setpath LOADEDMODULES $mod21:$mod11]
lappend ans [list setpath _LMFILES_ $mod21p:$mod11p]
testouterr_cmd_re "sh" "swap $mod11p" $ans ""

# same test without MODULEPATH set anymore
if { $verbose > 0 } {
    send_user "\tUnset MODULEPATH\n"
}
unset env(MODULEPATH)

set ans [list]
lappend ans [list setpath LOADEDMODULES $mod21]
lappend ans [list setpath _LMFILES_ $mod21p]
testouterr_cmd "sh" "swap $mod11p $mod21p" $ans ""

# one name rule
set ans [list]
lappend ans [list setpath LOADEDMODULES $mod11:$mod21:$mod12p]
lappend ans [list setpath _LMFILES_ $mod11p:$mod21p:$mod12p]
testouterr_cmd_re "sh" "swap $mod12p" $ans ""

set ans [list]
lappend ans [list setpath LOADEDMODULES $mod21:$mod11]
lappend ans [list setpath _LMFILES_ $mod21p:$mod11p]
testouterr_cmd_re "sh" "swap $mod11p" $ans ""


# swap with short path whereas full path loaded
if { $verbose > 0 } {
    send_user "\tRestore MODULEPATH = '$modpath'\n"
}
set env(MODULEPATH) $modpath
set env(_LMFILES_) "$mod11p:$mod21p"
set env(LOADEDMODULES) "$mod11p:$mod21p"

set ans [list]
lappend ans [list setpath LOADEDMODULES $mod21p]
lappend ans [list setpath _LMFILES_ $mod21p]
testouterr_cmd "sh" "swap $mod11 $mod21" $ans ""
testouterr_cmd "sh" "swap $mod1name $mod2name" $ans ""

# one name rule
set ans [list]
lappend ans [list setpath LOADEDMODULES $mod21p:$mod12]
lappend ans [list setpath _LMFILES_ $mod21p:$mod12p]
testouterr_cmd_re "sh" "swap $mod12" $ans ""
testouterr_cmd_re "sh" "swap $mod1name" $ans ""

# same test without MODULEPATH set anymore
if { $verbose > 0 } {
    send_user "\tUnset MODULEPATH\n"
}
unset env(MODULEPATH)

testouterr_cmd "sh" "swap $mod11 $mod21" "ERR" $err_nomodpath
testouterr_cmd "sh" "swap $mod1name $mod2name" "ERR" $err_nomodpath

# one name rule
testouterr_cmd "sh" "swap $mod12" "ERR" $err_nomodpath
testouterr_cmd "sh" "swap $mod1name" "ERR" $err_nomodpath


#
#  Cleanup
#

if { $verbose > 0 } {
    send_user "\tRestore MODULEPATH = '$modpath'\n"
}
set env(MODULEPATH) $modpath
unset env(_LMFILES_)
unset env(LOADEDMODULES)

unset ans
unset ans2

unset modulefile
unset module

unset mod1name
unset mod11
unset mod12
unset mod2name
unset mod21
unset mod22
unset mod31
unset mod32
unset mod11p
unset mod12p
unset mod21p
unset mod22p
unset mod31p
unset mod32p

unset mod100
unset mod100p
unset mod101
unset mod101p
unset mod102
unset mod102p
unset mod103
unset mod103p
unset mod104
unset mod104p
unset mod105
unset mod105p
unset mod106
unset mod106p
unset mod107
unset mod107p
unset mod108
unset mod108p

unset mod100err
unset mod101err
unset mod102err
unset mod100errun
unset mod101errun
unset mod102errun
