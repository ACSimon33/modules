##############################################################################
#   Modules Revision 3.0
#   Providing a flexible user environment
#
#   File:		modules.50-cmds/%M%
#   Revision:		%I%
#   First Edition:	2019/02/19
#   Last Mod.:		%U%, %G%
#
#   Authors:		Xavier Delaruelle, xavier.delaruelle@cea.fr
#
#   Description:	Testuite testsequence
#   Command:        load, unload, switch, purge, reload
#   Modulefiles:
#   Sub-Command:    prereq, conflict
#
#   Comment:	%C{
#           Test situations where error raised whereas automatic loading and
#           unloading mechanisms have been triggered.
#		}C%
#
##############################################################################

# enable auto_handling with environment variable
setenv_var MODULES_AUTO_HANDLING 1

set mp $modpath.deps

# setup specific environment
setenv_path_var MODULEPATH $mp


#
# crash of main mod load having some DepRe module unloaded
# this DepRe module info should be restored
#

# requirement info (and unmet dependency info) restored after evaluation crash
setenv_loaded_module [list rd] [list $mp/rd]
setenv_path_var MODULES_LMPREREQ rd&ra|rb
setenv_path_var MODULES_LMCONFLICT rd&rf

set ans [list]
lappend ans [list setpath LOADEDMODULES rb:rd:rc]
lappend ans [list setpath _LMFILES_ $mp/rb:$mp/rd:$mp/rc]
lappend ans [list setpath MODULES_LMPREREQ rd&ra|rb:rc&rb]
lappend ans [list setpath MODULES_LMCONFLICT rd&rf]
lappend ans [list setpath MODULES_LMNOTUASKED rb]
lappend ans [list ERR]
set tserr [list {unload rd} {load ra} {load rc} {unload rd} {load rb} {load rd} \n[msg_top_load rc {} rb {}]]
testouterr_cmd_re sh {load ra rc} $ans [join $tserr \n]

# not user asked info restored after evaluation crash
setenv_loaded_module [list rd] [list $mp/rd] [list rd]
setenv_path_var MODULES_LMPREREQ rd&ra|rb
setenv_path_var MODULES_LMCONFLICT rd&rf

set ans [list]
lappend ans [list setpath LOADEDMODULES rb:rd:rc]
lappend ans [list setpath _LMFILES_ $mp/rb:$mp/rd:$mp/rc]
lappend ans [list setpath MODULES_LMPREREQ rd&ra|rb:rc&rb]
lappend ans [list setpath MODULES_LMNOTUASKED rb:rd]
lappend ans [list setpath MODULES_LMCONFLICT rd&rf]
lappend ans [list ERR]
set tserr [list {unload rd} {load ra} {load rc} {unload rd} {load rb} {load rd} \n[msg_top_load rc {} rb {}]]
testouterr_cmd_re sh {load ra rc} $ans [join $tserr \n]

# is-loaded info restored after evaluation crash
set ans [list]
lappend ans [list setpath LOADEDMODULES rd:re]
lappend ans [list setpath _LMFILES_ $mp/rd:$mp/re]
lappend ans [list ERR]
set tserr [list {unload rd} {load ra} {load re} {rd loaded}]
testouterr_cmd_re sh {load ra re} $ans [join $tserr \n]

set ans [list]
lappend ans [list ERR]
set tserr [list {unload rd} {load ra}]
testouterr_cmd_re sh {load ra rd} $ans [join $tserr \n]

# conflict info (and conflict violation info) restored after evaluation crash
set ans [list]
lappend ans [list ERR]
set tserr [list {unload rd} {load ra} {load rf} \n[msg_load rf [err_conflict rf rd]]]
testouterr_cmd_re sh {load ra rf} $ans [join $tserr \n]

# alternative name info restored after evaluation crash
setenv_loaded_module [list rd] [list $mp/rd]
setenv_path_var MODULES_LMPREREQ rd&ra|rb
setenv_path_var MODULES_LMCONFLICT rd&rf
setenv_path_var MODULES_LMALTNAME rd&foo

set ans [list]
lappend ans [list setpath LOADEDMODULES rd:rg]
lappend ans [list setpath _LMFILES_ $mp/rd:$mp/rg]
lappend ans [list setpath MODULES_LMPREREQ rd&ra|rb:rg&foo]
lappend ans [list ERR]
set tserr [list {unload rd} {load ra} {load rg}]
testouterr_cmd_re sh {load ra rg} $ans [join $tserr \n]

# prereq violation info restored after evaluation crash
setenv_loaded_module [list rh] [list $mp/rh]
setenv_path_var MODULES_LMPREREQ rh&ra|rb&rf
unsetenv_path_var MODULES_LMCONFLICT

set ans [list]
lappend ans [list setpath LOADEDMODULES rh:rb:rc]
lappend ans [list setpath _LMFILES_ $mp/rh:$mp/rb:$mp/rc]
lappend ans [list setpath MODULES_LMPREREQ rh&ra|rb&rf:rc&rb]
lappend ans [list setpath MODULES_LMNOTUASKED rb]
lappend ans [list ERR]
set tserr [list {load ri} {unload rh} {load rc} {load rb} \n[msg_top_load rc {} rb {}]]
testouterr_cmd_re sh {load ri rc} $ans [join $tserr \n]

# NPO requirement info restored after evaluation crash
setenv_loaded_module [list rh rf] [list $mp/rh $mp/rf]
setenv_path_var MODULES_LMPREREQ rh&ra|rb&rf
unsetenv_path_var MODULES_LMCONFLICT

set ans [list]
lappend ans [list setpath LOADEDMODULES rf:rb:rh:rc]
lappend ans [list setpath _LMFILES_ $mp/rf:$mp/rb:$mp/rh:$mp/rc]
lappend ans [list setpath MODULES_LMPREREQ rh&ra|rb&rf:rc&rb]
lappend ans [list setpath MODULES_LMNOTUASKED rb]
lappend ans [list ERR]
set tserr [list {load ri} {unload rh} {load rc} {unload rh} {load rb} {load rh} \n[msg_top_load rc {} rb {}]]
testouterr_cmd_re sh {load ri rc} $ans [join $tserr \n]


#
# crash of main mod unload having some DepRe module unloaded
# this DepRe module info should be restored
#

# requirement info (and unmet dependency info) restored after evaluation crash
# fake ra was able to be loaded
setenv_loaded_module [list ra rf rh] [list $mp/ra $mp/rf $mp/rh]
setenv_path_var MODULES_LMPREREQ rh&ra|rb&rf
unsetenv_path_var MODULES_LMCONFLICT

set ans [list]
lappend ans [list setpath LOADEDMODULES ra]
lappend ans [list setpath _LMFILES_ $mp/ra]
lappend ans [list unsetpath MODULES_LMPREREQ]
lappend ans [list ERR]
set tserr [list {unload rh} {unload ra} \n[msg_top_unload ra rh {} {}]\n {unload rh} {unload rf} \n[msg_top_unload rf rh {} {}]]
testouterr_cmd_re sh {unload ra rf} $ans [join $tserr \n]


#
# crash of ReqLo mod load after other ReqLo module loaded
# the already loaded ReqLo module info should be cleaned
#

# requirement info (and unmet dependency info) restored after evaluation crash
setenv_loaded_module [list rh] [list $mp/rh]
setenv_path_var MODULES_LMPREREQ rh&ra|rb&rf
unsetenv_path_var MODULES_LMCONFLICT

set ans [list]
lappend ans [list setpath LOADEDMODULES rh:rf]
lappend ans [list setpath _LMFILES_ $mp/rh:$mp/rf]
lappend ans [list ERR]
set tserr [list {load rj} {load rb} {load ra} \n[msg_load rj [err_prereq rj ra]]\n {load rf}]
testouterr_cmd_re sh {load rj rf} $ans [join $tserr \n]

# conflict info (and conflict violation info) restored after evaluation crash
unsetenv_loaded_module
unsetenv_path_var MODULES_LMPREREQ
unsetenv_path_var MODULES_LMCONFLICT

set ans [list]
lappend ans [list setpath LOADEDMODULES rf]
lappend ans [list setpath _LMFILES_ $mp/rf]
lappend ans [list ERR]
set tserr [list {load rl} {load rk} {load ra} \n[msg_load rl [err_prereq rl ra]]\n {load rf}]
testouterr_cmd_re sh {load rl rf} $ans [join $tserr \n]


#
# crash of main mod load having some ReqLo module loaded
#

# conflict info (and conflict violation info) restored after evaluation crash
unsetenv_loaded_module
unsetenv_path_var MODULES_LMPREREQ
unsetenv_path_var MODULES_LMCONFLICT

set ans [list]
lappend ans [list setpath LOADEDMODULES ro]
lappend ans [list setpath _LMFILES_ $mp/ro]
lappend ans [list ERR]
set tserr [list {load rn} {load rm} {load ro}]
testouterr_cmd_re sh {load rn ro} $ans [join $tserr \n]


#
# crash of main mod unload having some DepUn module unloaded
#

# conflict info (and conflict violation info) restored after evaluation crash
setenv_loaded_module [list rq rr ro rs] [list $mp/rq $mp/rr $mp/ro $mp/rs]
setenv_path_var MODULES_LMPREREQ rr&rq
setenv_path_var MODULES_LMCONFLICT rr&ro:rs&ro

set ans [list]
lappend ans [list setpath LOADEDMODULES rq:rr:ro]
lappend ans [list setpath _LMFILES_ $mp/rq:$mp/rr:$mp/ro]
lappend ans [list setpath MODULES_LMCONFLICT rr&ro]
lappend ans [list ERR]
set tserr [list {unload rr} {unload rq} \n[msg_top_unload rq rr {} {}]\n {unload rs}]
testouterr_cmd_re sh {unload rq rs} $ans [join $tserr \n]


#
# load module
#

# crash of a ReqLo module (independent ReqLo, middle one crashes)
unsetenv_loaded_module
unsetenv_path_var MODULES_LMPREREQ
unsetenv_path_var MODULES_LMCONFLICT

set ans [list]
lappend ans [list ERR]
set tserr [list {load rad} {load raa} {load rab} \n[msg_load rad [err_prereq rad rab]]]
testouterr_cmd_re sh {load rad} $ans [join $tserr \n]

# crash of a ReqLo module (linked ReqLo, middle one crashes)
unsetenv_loaded_module
unsetenv_path_var MODULES_LMPREREQ
unsetenv_path_var MODULES_LMCONFLICT

set ans [list]
lappend ans [list ERR]
set tserr [list {load rah} {load rag} {load raf} {load rae} \n[msg_load rag [err_prereq rag raf]] \n[msg_load rah [err_prereq rah rag]]]
testouterr_cmd_re sh {load rah} $ans [join $tserr \n]


# crash of a DepRe module during unload phase (independent DepRe, middle one crashes)
setenv_loaded_module [list rea rec red ree] [list $mp/rea $mp/rec $mp/red $mp/ree]
setenv_path_var MODULES_LMPREREQ rec&rea|reb:red&rea|reb:ree&rea|reb
unsetenv_path_var MODULES_LMCONFLICT

set ans [list]
lappend ans [list ERR]
set tserr [list {unload ree} {unload red} \n[msg_load reb [err_depre red]]]
testouterr_cmd_re sh {load reb} $ans [join $tserr \n]

# crash of a DepRe module during unload phase (linked DepRe, middle one crashes)
setenv_loaded_module [list rea ref reg reh] [list $mp/rea $mp/ref $mp/reg $mp/reh]
setenv_path_var MODULES_LMPREREQ ref&rea|reb:reg&rea|reb&ref:reh&rea|reb&reh
unsetenv_path_var MODULES_LMCONFLICT

set ans [list]
lappend ans [list ERR]
set tserr [list {unload reh} {unload reg} \n[msg_load reb [err_depre reg]]]
testouterr_cmd_re sh {load reb} $ans [join $tserr \n]

# crash of a DepRe module during load phase (independent DepRe, middle one crashes)
setenv_loaded_module [list rea rei rej rek] [list $mp/rea $mp/rei $mp/rej $mp/rek]
setenv_path_var MODULES_LMPREREQ rei&rea|reb:rej&rea|reb:rek&rea|reb
unsetenv_path_var MODULES_LMCONFLICT

set ans [list]
lappend ans [list ERR]
set tserr [list {unload rek} {unload rej} {unload rei} {load reb} {load rei} {load rej} \n[msg_load reb [err_depre rej]]]
testouterr_cmd_re sh {load reb} $ans [join $tserr \n]

# crash of a DepRe module during load phase (linked DepRe, middle one crashes)
setenv_loaded_module [list rea rel rem ren] [list $mp/rea $mp/rel $mp/rem $mp/ren]
setenv_path_var MODULES_LMPREREQ rel&rea|reb:rem&rea|reb&rel:ren&rea|reb&ren
unsetenv_path_var MODULES_LMCONFLICT

set ans [list]
lappend ans [list ERR]
set tserr [list {unload ren} {unload rem} {unload rel} {load reb} {load rel} {load rem} \n[msg_load reb [err_depre rem]]]
testouterr_cmd_re sh {load reb} $ans [join $tserr \n]

# crash of a DepRe module during unload phase and load phase (linked DepRe, middle one crashes)
setenv_loaded_module [list rea ref reg reh rel rem ren] [list $mp/rea $mp/ref $mp/reg $mp/reh $mp/rel $mp/rem $mp/ren]
setenv_path_var MODULES_LMPREREQ ref&rea|reb:reg&rea|reb&ref:reh&rea|reb&reh:rel&rea|reb:rem&rea|reb&rel:ren&rea|reb&ren
unsetenv_path_var MODULES_LMCONFLICT

set ans [list]
lappend ans [list ERR]
set tserr [list {unload ren} {unload rem} {unload rel} {unload reh} {unload reg} \n[msg_load reb [err_depre reg]]]
testouterr_cmd_re sh {load reb} $ans [join $tserr \n]


#
# unload module
#

# crash of a UReqUn module (independent UreqUn, middle one crashes)
setenv_loaded_module [list raa rab rac rad] [list $mp/raa $mp/rab $mp/rac $mp/rad] [list raa rab rac]
setenv_path_var MODULES_LMPREREQ rad&raa&rab&rac
unsetenv_path_var MODULES_LMCONFLICT

set ans [list]
lappend ans [list unsetpath MODULES_LMPREREQ]
lappend ans [list setpath _LMFILES_ $mp/rab]
lappend ans [list setpath LOADEDMODULES rab]
lappend ans [list setpath MODULES_LMNOTUASKED rab]
lappend ans [list ERR]
set tserr [list {unload rad} {unload rac} {unload rab} {unload raa} \n[msg_top_unload rad {} [list rac rab raa] {} [err_urequn rab]]]
testouterr_cmd_re sh {unload rad} $ans [join $tserr \n]
testouterr_cmd_re sh {unload --force rad} $ans [join $tserr \n]

# crash of a UReqUn module (linked UreqUn, middle one crashes)
setenv_loaded_module [list rae raf rag rah] [list $mp/rae $mp/raf $mp/rag $mp/rah] [list rae raf rag]
setenv_path_var MODULES_LMPREREQ rah&rag:rag&raf:raf&rae
unsetenv_path_var MODULES_LMCONFLICT

set ans [list]
lappend ans [list setpath MODULES_LMPREREQ raf&rae]
lappend ans [list setpath _LMFILES_ $mp/rae:$mp/raf]
lappend ans [list setpath LOADEDMODULES rae:raf]
lappend ans [list setpath MODULES_LMNOTUASKED rae:raf]
lappend ans [list ERR]
set tserr [list {unload rah} {unload rag} {unload raf} \n[msg_top_unload rah {} [list rag raf] {} [err_urequn raf]] ]
testouterr_cmd_re sh {unload rah} $ans [join $tserr \n]
testouterr_cmd_re sh {unload --force rah} $ans [join $tserr \n]


# crash of a UReqUn module (requirement expressed with 'module load', independent UreqUn, middle one crashes)
setenv_loaded_module [list raam rabm racm radm] [list $mp/raam $mp/rabm $mp/racm $mp/radm] [list raam rabm racm]
setenv_path_var MODULES_LMPREREQ radm&raam&rabm&racm
unsetenv_path_var MODULES_LMCONFLICT

set ans [list]
lappend ans [list unsetpath MODULES_LMPREREQ]
lappend ans [list setpath _LMFILES_ $mp/rabm]
lappend ans [list setpath LOADEDMODULES rabm]
lappend ans [list setpath MODULES_LMNOTUASKED rabm]
lappend ans [list ERR]
set tserr [list {unload radm} {unload racm} {unload rabm} {unload raam} \n[msg_top_unload radm {} [list racm rabm raam] {} [err_urequn rabm]]]
testouterr_cmd_re sh {unload radm} $ans [join $tserr \n]
testouterr_cmd_re sh {unload --force radm} $ans [join $tserr \n]
set ans [list]
lappend ans [list setpath _LMFILES_ $mp/rabm]
lappend ans [list setpath LOADEDMODULES rabm]
lappend ans [list setpath MODULES_LMNOTUASKED rabm]
lappend ans [list unsetpath MODULES_LMPREREQ]
lappend ans [list ERR]
#FIXME: should get same list of UReqUn and associated failed unload warning than for auto mode
set tserr [list {unload radm} {unload raam} {unload rabm} {unload racm} \n[msg_top_unload radm {} [list racm raam] {}]]
testouterr_cmd_re sh {unload --no-auto radm} $ans [join $tserr \n]
testouterr_cmd_re sh {unload --no-auto --force radm} $ans [join $tserr \n]

# crash of a UReqUn module (requirement expressed with 'module load', linked UreqUn, middle one crashes)
setenv_loaded_module [list raem rafm ragm rahm] [list $mp/raem $mp/rafm $mp/ragm $mp/rahm] [list raem rafm ragm]
setenv_path_var MODULES_LMPREREQ rahm&ragm:ragm&rafm:rafm&raem
unsetenv_path_var MODULES_LMCONFLICT

set ans [list]
lappend ans [list setpath MODULES_LMPREREQ rafm&raem]
lappend ans [list setpath _LMFILES_ $mp/raem:$mp/rafm]
lappend ans [list setpath LOADEDMODULES raem:rafm]
lappend ans [list setpath MODULES_LMNOTUASKED raem:rafm]
lappend ans [list ERR]
set tserr [list {unload rahm} {unload ragm} {unload rafm} \n[msg_top_unload rahm {} [list ragm rafm] {} [err_urequn rafm]] ]
testouterr_cmd_re sh {unload rahm} $ans [join $tserr \n]
testouterr_cmd_re sh {unload --force rahm} $ans [join $tserr \n]
set ans [list]
lappend ans [list setpath LOADEDMODULES raem:rafm]
lappend ans [list setpath _LMFILES_ $mp/raem:$mp/rafm]
lappend ans [list setpath MODULES_LMNOTUASKED raem:rafm]
lappend ans [list setpath MODULES_LMPREREQ rafm&raem]
lappend ans [list ERR]
#FIXME: should get same list of UReqUn and associated failed unload warning than for auto mode
set tserr [list {unload rahm} {unload ragm} {unload rafm} {unload raem} \n[msg_top_unload rahm {} [list ragm] {}] ]
testouterr_cmd_re sh {unload --no-auto rahm} $ans [join $tserr \n]
testouterr_cmd_re sh {unload --no-auto --force rahm} $ans [join $tserr \n]


# crash of a DepUn module (independent DepUn, middle one crashes)
setenv_loaded_module [list rba rbb rbc rbd] [list $mp/rba $mp/rbb $mp/rbc $mp/rbd]
setenv_path_var MODULES_LMPREREQ rbb&rba:rbc&rba:rbd&rba
unsetenv_path_var MODULES_LMCONFLICT

set ans [list]
lappend ans [list setpath MODULES_LMPREREQ rbc&rba]
lappend ans [list setpath _LMFILES_ $mp/rbc]
lappend ans [list setpath LOADEDMODULES rbc]
lappend ans [list ERR]
set tserr [list {unload rbd} {unload rbc} \n[msg_unload rba [err_depun rbc]]]
testouterr_cmd_re sh {unload rba} ERR [join $tserr \n]
set tserr [list {unload rbd} {unload rbc} {unload rbb} {unload rba} \n[msg_top_unload rba [list rbd rbc rbb] {} {} [err_depunf rbc]]]
testouterr_cmd_re sh {unload --force rba} $ans [join $tserr \n]

# crash of a DepUn module (linked DepUn, middle one crashes)
setenv_loaded_module [list rbe rbf rbg rbh] [list $mp/rbe $mp/rbf $mp/rbg $mp/rbh]
setenv_path_var MODULES_LMPREREQ rbf&rbe:rbg&rbf:rbh&rbg
unsetenv_path_var MODULES_LMCONFLICT

set ans [list]
lappend ans [list setpath MODULES_LMPREREQ rbg&rbf]
lappend ans [list setpath _LMFILES_ $mp/rbg]
lappend ans [list setpath LOADEDMODULES rbg]
lappend ans [list ERR]
set tserr [list {unload rbh} {unload rbg} \n[msg_unload rbe [err_depun rbg]]]
testouterr_cmd_re sh {unload rbe} ERR [join $tserr \n]
set tserr [list {unload rbh} {unload rbg} {unload rbf} \n[msg_unload rbf [err_prerequnf rbf rbg]]\n {unload rbe} \n[msg_top_unload rbe [list rbh rbg rbf] {} {} [err_depunf rbg]]]
testouterr_cmd_re sh {unload --force rbe} $ans [join $tserr \n]


# crash of a DepRe module during unload phase (independent DepRe, middle one crashes)
setenv_loaded_module [list rea reb rec red ree] [list $mp/rea $mp/reb $mp/rec $mp/red $mp/ree]
setenv_path_var MODULES_LMPREREQ rec&rea|reb:red&rea|reb:ree&rea|reb
unsetenv_path_var MODULES_LMCONFLICT

set ans [list]
lappend ans [list ERR]
set tserr [list {unload ree} {unload red} \n[msg_unload reb [err_depre red]]]
testouterr_cmd_re sh {unload reb} $ans [join $tserr \n]

# crash of a DepRe module during unload phase (linked DepRe, middle one crashes)
setenv_loaded_module [list rea reb ref reg reh] [list $mp/rea $mp/reb $mp/ref $mp/reg $mp/reh]
setenv_path_var MODULES_LMPREREQ ref&rea|reb:reg&rea|reb&ref:reh&rea|reb&reh
unsetenv_path_var MODULES_LMCONFLICT

set ans [list]
lappend ans [list ERR]
set tserr [list {unload reh} {unload reg} \n[msg_unload reb [err_depre reg]]]
testouterr_cmd_re sh {unload reb} $ans [join $tserr \n]

# crash of a DepRe module during load phase (independent DepRe, middle one crashes)
setenv_loaded_module [list rea reb rei rej rek] [list $mp/rea $mp/reb $mp/rei $mp/rej $mp/rek]
setenv_path_var MODULES_LMPREREQ rei&rea|reb:rej&rea|reb:rek&rea|reb
unsetenv_path_var MODULES_LMCONFLICT

set ans [list]
lappend ans [list ERR]
set tserr [list {unload rek} {unload rej} {unload rei} {unload reb} {load rei} {load rej} \n[msg_unload reb [err_depre rej]]]
testouterr_cmd_re sh {unload reb} $ans [join $tserr \n]

# crash of a DepRe module during load phase (linked DepRe, middle one crashes)
setenv_loaded_module [list rea reb rel rem ren] [list $mp/rea $mp/reb $mp/rel $mp/rem $mp/ren]
setenv_path_var MODULES_LMPREREQ rel&rea|reb:rem&rea|reb&rel:ren&rea|reb&ren
unsetenv_path_var MODULES_LMCONFLICT

set ans [list]
lappend ans [list ERR]
set tserr [list {unload ren} {unload rem} {unload rel} {unload reb} {load rel} {load rem} \n[msg_unload reb [err_depre rem]]]
testouterr_cmd_re sh {unload reb} $ans [join $tserr \n]

# crash of a DepRe module during unload phase and load phase (linked DepRe, middle one crashes)
setenv_loaded_module [list rea reb ref reg reh rel rem ren] [list $mp/rea $mp/reb $mp/ref $mp/reg $mp/reh $mp/rel $mp/rem $mp/ren]
setenv_path_var MODULES_LMPREREQ ref&rea|reb:reg&rea|reb&ref:reh&rea|reb&reh:rel&rea|reb:rem&rea|reb&rel:ren&rea|reb&ren
unsetenv_path_var MODULES_LMCONFLICT

set ans [list]
lappend ans [list ERR]
set tserr [list {unload ren} {unload rem} {unload rel} {unload reh} {unload reg} \n[msg_unload reb [err_depre reg]]]
testouterr_cmd_re sh {unload reb} $ans [join $tserr \n]


#
# switch
#

# crash of a DepRe module during unload phase (independent DepRe, middle one crashes)
setenv_loaded_module [list rea rec red ree] [list $mp/rea $mp/rec $mp/red $mp/ree]
setenv_path_var MODULES_LMPREREQ rec&rea|reb:red&rea|reb:ree&rea|reb
unsetenv_path_var MODULES_LMCONFLICT

set ans [list]
lappend ans [list ERR]
#FIXME: DepRe error message should be reported under the message block related to main switch action
set tserr [list {unload ree} {unload red} \n[msg_unload rea [err_depre red]]]
testouterr_cmd_re sh {switch rea reb} $ans [join $tserr \n]

# crash of a DepRe module during unload phase (linked DepRe, middle one crashes)
setenv_loaded_module [list rea ref reg reh] [list $mp/rea $mp/ref $mp/reg $mp/reh]
setenv_path_var MODULES_LMPREREQ ref&rea|reb:reg&rea|reb&ref:reh&rea|reb&reh
unsetenv_path_var MODULES_LMCONFLICT

set ans [list]
lappend ans [list ERR]
#FIXME: DepRe error message should be reported under the message block related to main switch action
set tserr [list {unload reh} {unload reg} \n[msg_unload rea [err_depre reg]]]
testouterr_cmd_re sh {switch rea reb} $ans [join $tserr \n]

# crash of a DepRe module during load phase (independent DepRe, middle one crashes)
setenv_loaded_module [list rea rei rej rek] [list $mp/rea $mp/rei $mp/rej $mp/rek]
setenv_path_var MODULES_LMPREREQ rei&rea|reb:rej&rea|reb:rek&rea|reb
unsetenv_path_var MODULES_LMCONFLICT

set ans [list]
lappend ans [list setpath MODULES_LMPREREQ rei&rea|reb:rek&rea|reb]
lappend ans [list setpath _LMFILES_ $mp/reb:$mp/rei:$mp/rek]
lappend ans [list setpath LOADEDMODULES reb:rei:rek]
lappend ans [list ERR]
set tserr [list {unload rek} {unload rej} {unload rei} {unload rea} {load reb} {load rei} {load rej} {load rek} \n[msg_top_switch rea reb {} {} {} {} [list rei rej rek] [err_depref rej]]]
testouterr_cmd_re sh {switch rea reb} $ans [join $tserr \n]

# crash of a DepRe module during load phase (linked DepRe, middle one crashes)
setenv_loaded_module [list rea rel rem ren] [list $mp/rea $mp/rel $mp/rem $mp/ren]
setenv_path_var MODULES_LMPREREQ rel&rea|reb:rem&rea|reb&rel:ren&rea|reb&ren
unsetenv_path_var MODULES_LMCONFLICT

set ans [list]
lappend ans [list setpath LOADEDMODULES reb:rel]
lappend ans [list setpath _LMFILES_ $mp/reb:$mp/rel]
lappend ans [list setpath MODULES_LMPREREQ rel&rea|reb]
lappend ans [list ERR]
set tserr [list {unload ren} {unload rem} {unload rel} {unload rea} {load reb} {load rel} {load rem} {load ren} \n[msg_load ren [err_prereq ren rem]] \n[msg_top_switch rea reb {} {} {} {} [list rel rem ren] [err_depref rem] [err_depref ren]]]
testouterr_cmd_re sh {switch rea reb} $ans [join $tserr \n]

# crash of a DepRe module during unload phase and load phase (linked DepRe, middle one crashes)
setenv_loaded_module [list rea ref reg reh rel rem ren] [list $mp/rea $mp/ref $mp/reg $mp/reh $mp/rel $mp/rem $mp/ren]
setenv_path_var MODULES_LMPREREQ ref&rea|reb:reg&rea|reb&ref:reh&rea|reb&reh:rel&rea|reb:rem&rea|reb&rel:ren&rea|reb&ren
unsetenv_path_var MODULES_LMCONFLICT

set ans [list]
lappend ans [list ERR]
#FIXME: DepRe error message should be reported under the message block related to main switch action
set tserr [list {unload ren} {unload rem} {unload rel} {unload reh} {unload reg} \n[msg_unload rea [err_depre reg]]]
testouterr_cmd_re sh {switch rea reb} $ans [join $tserr \n]


#
# purge
#

# crash of a module when unloading (linked modules, middle one crashes)
setenv_loaded_module [list rca rcb rcc rcd rce] [list $mp/rca $mp/rcb $mp/rcc $mp/rcd $mp/rce] [list rca rcb rcc rcd]
setenv_path_var MODULES_LMPREREQ rce&rcd:rcd&rcc:rcc&rcb:rcb&rca
unsetenv_path_var MODULES_LMCONFLICT

set ans [list]
lappend ans [list setpath MODULES_LMPREREQ rcc&rcb]
lappend ans [list setpath _LMFILES_ $mp/rcc]
lappend ans [list setpath LOADEDMODULES rcc]
lappend ans [list setpath MODULES_LMNOTUASKED rcc]
lappend ans [list ERR]
#FIXME: no clear message about the failing module and the resulting situation
set tserr [list {unload rce} {unload rcd} {unload rcc} {unload rcb} {unload rca}]
testouterr_cmd_re sh {purge} $ans [join $tserr \n]
# adding --force argument does not change a thing
testouterr_cmd_re sh {purge --force} $ans [join $tserr \n]


#
# reload
#

# crash of a module when unloading and another one when loading (linked modules, middle one crashes)
setenv_loaded_module [list rca rcb rcc rcd rce] [list $mp/rca $mp/rcb $mp/rcc $mp/rcd $mp/rce] [list rca rcb rcc rcd]
setenv_path_var MODULES_LMPREREQ rce&rcd:rcd&rcc:rcc&rcb:rcb&rca
unsetenv_path_var MODULES_LMCONFLICT

set tserr [list {unload rce} {unload rcd} {unload rcc} \n[msg_reload [err_reload rcc]]]
testouterr_cmd_re sh {reload} ERR [join $tserr \n]
testouterr_cmd_re sh {reload --force} ERR [join $tserr \n]

# crash of a module when loading (linked modules, middle one crashes)
setenv_loaded_module [list rdc rdd rde] [list $mp/rdc $mp/rdd $mp/rde] [list rdc rdd]
setenv_path_var MODULES_LMPREREQ rdd&rdc:rde&rdd
unsetenv_path_var MODULES_LMCONFLICT

set tserr [list {unload rde} {unload rdd} {unload rdc} {load rdc} {load rdd} \n[msg_reload [err_reload rdd]]]
testouterr_cmd_re sh {reload} ERR [join $tserr \n]
testouterr_cmd_re sh {reload --force} ERR [join $tserr \n]


#
#  Cleanup
#

# restore environment
setenv_path_var MODULEPATH $modpath

unsetenv_loaded_module
unsetenv_path_var MODULES_LMPREREQ
unsetenv_path_var MODULES_LMCONFLICT
unsetenv_var MODULES_AUTO_HANDLING

unset mp
unset ans
unset tserr
