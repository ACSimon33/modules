##############################################################################
#   Modules Revision 3.0
#   Providing a flexible user environment
#
#   File:		modules.50-cmds/%M%
#   Revision:		%I%
#   First Edition:	2018/06/06
#   Last Mod.:		%U%, %G%
#
#   Authors:		Xavier Delaruelle, xavier.delaruelle@cea.fr
#
#   Description:	Testuite testsequence
#   Command:        load, unload
#   Modulefiles:
#   Sub-Command:    prereq, conflict
#
#   Comment:	%C{
#           Test automatic resolution of modulefile dependencies when the
#           auto-handling mode is enabled (dependent modules handling)
#		}C%
#
##############################################################################

# enable auto_handling with environment variable
setenv_var MODULES_AUTO_HANDLING 1

set mp "$modpath.deps"

# setup specific environment
setenv_path_var MODULEPATH $mp

# test correct dependency resolution
set ans [list]
lappend ans [list setpath LOADEDMODULES "ca:cc:cd:ce:cf:cg"]
lappend ans [list setpath _LMFILES_ "$mp/ca:$mp/cc:$mp/cd:$mp/ce:$mp/cf:$mp/cg"]
lappend ans [list setpath MODULES_LMPREREQ "cc&ca|cb:cd&cc:ce&cd:cf&cc:cg&cf"]
lappend ans [list setpath MODULES_LMNOTUASKED "ca:cc:cd:cf"]
set tserr [list "load ca" "load cc" "load cd" "load ce" "load cf" "load cg"]
testouterr_cmd_re "sh" "load ce cg" $ans [join $tserr "\n"]

# set environment with above result
setenv_loaded_module [list ca cc cd ce cf cg] [list "$mp/ca" "$mp/cc" "$mp/cd" "$mp/ce" "$mp/cf" "$mp/cg"] [list ca cc cd cf]
setenv_path_var MODULES_LMPREREQ "cc&ca|cb" "cd&cc" "ce&cd" "cf&cc" "cg&cf"

# load optional prereq module (alternative module was loaded automatically)
set ans [list]
lappend ans [list setpath LOADEDMODULES "ca:cb:cc:cd:ce:cf:cg"]
lappend ans [list setpath _LMFILES_ "$mp/ca:$mp/cb:$mp/cc:$mp/cd:$mp/ce:$mp/cf:$mp/cg"]
# LMPREREQ and LMNOTUASKED are updated as dependencies are reloaded
lappend ans [list setpath MODULES_LMPREREQ "cc&ca|cb:cd&cc:ce&cd:cf&cc:cg&cf"]
lappend ans [list setpath MODULES_LMNOTUASKED "ca:cc:cd:cf"]
set tserr [list "load cb" "unload cg" "unload cf" "unload ce" "unload cd" "unload cc" "load cc" "load cd" "load ce" "load cf" "load cg"]
testouterr_cmd_re "sh" "load cb" $ans [join $tserr "\n"]

# set environment where every module has been asked by user
setenv_loaded_module [list ca cc cd ce cf cg] [list "$mp/ca" "$mp/cc" "$mp/cd" "$mp/ce" "$mp/cf" "$mp/cg"]
setenv_path_var MODULES_LMPREREQ "cc&ca|cb" "cd&cc" "ce&cd" "cf&cc" "cg&cf"

# load optional prereq module (every module loaded by user)
set ans [list]
lappend ans [list setpath LOADEDMODULES "ca:cb:cc:cd:ce:cf:cg"]
lappend ans [list setpath _LMFILES_ "$mp/ca:$mp/cb:$mp/cc:$mp/cd:$mp/ce:$mp/cf:$mp/cg"]
# LMPREREQ is updated as dependencies are reloaded
lappend ans [list setpath MODULES_LMPREREQ "cc&ca|cb:cd&cc:ce&cd:cf&cc:cg&cf"]
set tserr [list "load cb" "unload cg" "unload cf" "unload ce" "unload cd" "unload cc" "load cc" "load cd" "load ce" "load cf" "load cg"]
testouterr_cmd_re "sh" "load cb" $ans [join $tserr "\n"]


# test with alternative prereq already loaded (asked by user)
setenv_loaded_module [list cb] [list "$mp/cb"]
unsetenv_path_var MODULES_LMPREREQ

set ans [list]
lappend ans [list setpath LOADEDMODULES "cb:cc:cd:ce:cf:cg"]
lappend ans [list setpath _LMFILES_ "$mp/cb:$mp/cc:$mp/cd:$mp/ce:$mp/cf:$mp/cg"]
lappend ans [list setpath MODULES_LMPREREQ "cc&ca|cb:cd&cc:ce&cd:cf&cc:cg&cf"]
lappend ans [list setpath MODULES_LMNOTUASKED "cc:cd:cf"]
set tserr [list "load cc" "load cd" "load ce" "load cf" "load cg"]
testouterr_cmd_re "sh" "load ce cg" $ans [join $tserr "\n"]

# set environment with above result
setenv_loaded_module [list cb cc cd ce cf cg] [list "$mp/cb" "$mp/cc" "$mp/cd" "$mp/ce" "$mp/cf" "$mp/cg"] [list cc cd cf]
setenv_path_var MODULES_LMPREREQ "cc&ca|cb" "cd&cc" "ce&cd" "cf&cc" "cg&cf"

# load optional first-in-list prereq module
set ans [list]
lappend ans [list setpath LOADEDMODULES "cb:ca:cc:cd:ce:cf:cg"]
lappend ans [list setpath _LMFILES_ "$mp/cb:$mp/ca:$mp/cc:$mp/cd:$mp/ce:$mp/cf:$mp/cg"]
# LMPREREQ and LMNOTUASKED are updated as dependencies are reloaded
lappend ans [list setpath MODULES_LMPREREQ "cc&ca|cb:cd&cc:ce&cd:cf&cc:cg&cf"]
lappend ans [list setpath MODULES_LMNOTUASKED "cc:cd:cf"]
set tserr [list "load ca" "unload cg" "unload cf" "unload ce" "unload cd" "unload cc" "load cc" "load cd" "load ce" "load cf" "load cg"]
testouterr_cmd_re "sh" "load ca" $ans [join $tserr "\n"]

# set environment where every module has been asked by user
setenv_loaded_module [list cb cc cd ce cf cg] [list "$mp/cb" "$mp/cc" "$mp/cd" "$mp/ce" "$mp/cf" "$mp/cg"]
setenv_path_var MODULES_LMPREREQ "cc&ca|cb" "cd&cc" "ce&cd" "cf&cc" "cg&cf"

# load optional first-in-list prereq module (every module loaded by user)
set ans [list]
lappend ans [list setpath LOADEDMODULES "cb:ca:cc:cd:ce:cf:cg"]
lappend ans [list setpath _LMFILES_ "$mp/cb:$mp/ca:$mp/cc:$mp/cd:$mp/ce:$mp/cf:$mp/cg"]
# LMPREREQ is updated as dependencies are reloaded
lappend ans [list setpath MODULES_LMPREREQ "cc&ca|cb:cd&cc:ce&cd:cf&cc:cg&cf"]
set tserr [list "load ca" "unload cg" "unload cf" "unload ce" "unload cd" "unload cc" "load cc" "load cd" "load ce" "load cf" "load cg"]
testouterr_cmd_re "sh" "load ca" $ans [join $tserr "\n"]


# set environment with both optional prereq loaded
setenv_loaded_module [list ca cb cc cd ce cf cg] [list "$mp/ca" "$mp/cb" "$mp/cc" "$mp/cd" "$mp/ce" "$mp/cf" "$mp/cg"] [list ca cc cd cf]
setenv_path_var MODULES_LMPREREQ "cc&ca|cb" "cd&cc" "ce&cd" "cf&cc" "cg&cf"

# unload optional first-in-list prereq module
set ans [list]
lappend ans [list setpath LOADEDMODULES "cb:cc:cd:ce:cf:cg"]
lappend ans [list setpath _LMFILES_ "$mp/cb:$mp/cc:$mp/cd:$mp/ce:$mp/cf:$mp/cg"]
# LMPREREQ and LMNOTUASKED are updated as dependencies are reloaded
lappend ans [list setpath MODULES_LMPREREQ "cc&ca|cb:cd&cc:ce&cd:cf&cc:cg&cf"]
lappend ans [list setpath MODULES_LMNOTUASKED "cc:cd:cf"]
set tserr [list "unload ca" "unload cg" "unload cf" "unload ce" "unload cd" "unload cc" "load cc" "load cd" "load ce" "load cf" "load cg"]
testouterr_cmd_re "sh" "unload ca" $ans [join $tserr "\n"]

# unload optional second-in-list prereq module
set ans [list]
lappend ans [list setpath LOADEDMODULES "ca:cc:cd:ce:cf:cg"]
lappend ans [list setpath _LMFILES_ "$mp/ca:$mp/cc:$mp/cd:$mp/ce:$mp/cf:$mp/cg"]
# LMPREREQ and LMNOTUASKED are updated as dependencies are reloaded
lappend ans [list setpath MODULES_LMPREREQ "cc&ca|cb:cd&cc:ce&cd:cf&cc:cg&cf"]
lappend ans [list setpath MODULES_LMNOTUASKED "ca:cc:cd:cf"]
set tserr [list "unload cb" "unload cg" "unload cf" "unload ce" "unload cd" "unload cc" "load cc" "load cd" "load ce" "load cf" "load cg"]
testouterr_cmd_re "sh" "unload cb" $ans [join $tserr "\n"]


# restore environment
unsetenv_path_var MODULES_LMPREREQ
unsetenv_loaded_module

# test load of first-operational-in-list prereq module
set ans [list]
lappend ans [list setpath LOADEDMODULES "dd:df:dg"]
lappend ans [list setpath _LMFILES_ "$mp/dd:$mp/df:$mp/dg"]
lappend ans [list setpath MODULES_LMNOTUASKED "dd:df"]
lappend ans [list setpath MODULES_LMCONFLICT "dg&db"]
lappend ans [list setpath MODULES_LMPREREQ "df&da|db|dc|dd|de:dg&df"]
lappend ans [list ERR]
set tserr [list [err_conflictw da df] "$error_msgs: [err_conflict db dg]" "load dc" "load dd" "load df" "load dg"]
testouterr_cmd_re "sh" "load dg" $ans [join $tserr "\n"]

# test with alternative prereq already loaded (asked by user)
setenv_loaded_module [list de] [list "$mp/de"]

# test load of first-operational-in-list prereq module with alternative prereq already loaded
set ans [list]
lappend ans [list setpath LOADEDMODULES "de:df:dg"]
lappend ans [list setpath _LMFILES_ "$mp/de:$mp/df:$mp/dg"]
lappend ans [list setpath MODULES_LMNOTUASKED "df"]
lappend ans [list setpath MODULES_LMCONFLICT "dg&db"]
lappend ans [list setpath MODULES_LMPREREQ "df&da|db|dc|dd|de:dg&df"]
set tserr [list "load df" "load dg"]
testouterr_cmd_re "sh" "load dg" $ans [join $tserr "\n"]

# set environment where every module has been asked by user
setenv_loaded_module [list de df dg] [list "$mp/de" "$mp/df" "$mp/dg"]
setenv_path_var MODULES_LMPREREQ "df&da|db|dc|dd|de" "dg&df"
setenv_path_var MODULES_LMCONFLICT "dg&db"

# attempt to unload first-operational-in-list prereq module
testouterr_cmd_re "sh" "unload de" "ERR" "$error_msgs: [err_prerequn de df]"


# tests with prereq suite fully loaded
setenv_loaded_module [list dd df dg] [list "$mp/dd" "$mp/df" "$mp/dg"] [list dd df]
setenv_path_var MODULES_LMPREREQ "df&da|db|dc|dd|de" "dg&df"
setenv_path_var MODULES_LMCONFLICT "dg&db"

# attempt to load broken/conflicting prereq alternative
testouterr_cmd_re "sh" "load da" "ERR" [err_conflict da df]
testouterr_cmd_re "sh" "load db" "ERR" "$error_msgs: [err_conflict db dg]"
testouterr_cmd_re "sh" "load dc" "ERR" "load dc"

#
#  Cleanup
#

# restore environment
setenv_path_var MODULEPATH $modpath
unsetenv_path_var MODULES_LMPREREQ
unsetenv_path_var MODULES_LMCONFLICT
unsetenv_loaded_module

unsetenv_var MODULES_AUTO_HANDLING

unset mp
unset ans
