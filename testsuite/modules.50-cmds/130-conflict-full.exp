##############################################################################
#   Modules Revision 3.0
#   Providing a flexible user environment
#
#   File:		modules.50-cmds/%M%
#   Revision:		%I%
#   First Edition:	1995/12/06
#   Last Mod.:		%U%, %G%
#
#   Authors:		Jens Hamisch, Jens.Hamisch@Strawberry.COM
#
#   Description:	Testuite testsequence
#   Command:		load, unload, purge, reload
#   Modulefiles:	conflict/full, trace/all_on, trace/all_off
#   Sub-Command:
#
#   Comment:	%C{
#			Tests the 'conflict' command using a full qualified
#			module name. This tests the reactions of modulecmd
#			if the conflicting module is load or not and if
#			another module of the same category is load.
#		}C%
#
##############################################################################

#
#  Variables. This test forces a module load command. It will result in the
#    environment variables "_LMFILES_", "LOADEDMODULES" and "testsuite" to
#    be set up
#

set module "conflict/full"
set modulefile "$modpath/$module"

set module_tron "trace/all_on"
set modulefile_tron "$modpath/$module_tron"

set module_troff "trace/all_off"
set modulefile_troff "$modpath/$module_troff"

#
#  Error messages
#

# additional message on Tcl-version as 'module-trace' is not implemented
set err_trace "$warn_msgs: 'module-trace' command not implemented"
set err_con "$err_trace\n[err_conflict $module trace/all_on]"

#
#  The tests
#

lappend ans [list setpath _LMFILES_ $modulefile_tron]
lappend ans [list setpath LOADEDMODULES $module_tron]
lappend ans [list ERR]
testouterr_cmd_re "ALL" "load $module_tron $module" $ans $err_con

set ans [list]
lappend ans [list setpath LOADEDMODULES "$module_troff:$module"]
lappend ans [list setpath _LMFILES_ "$modulefile_troff:$modulefile"]
lappend ans [list setpath MODULES_LMCONFLICT "$module&$module_tron"]
lappend ans [list set testsuite yes]
test_cmd_re "ALL" "load $module_troff $module" $ans

set ans [list]
lappend ans [list set testsuite yes]
lappend ans [list setpath LOADEDMODULES $module]
lappend ans [list setpath _LMFILES_ $modulefile]
lappend ans [list setpath MODULES_LMCONFLICT "$module&$module_tron"]
test_cmd_re "ALL" "load $module" $ans


# test situations where auto_handling is disabled and some constraints are unsatisfied
# force module load even if conflicting module is loaded
setenv_loaded_module [list $module_tron] [list $modulefile_tron]
set ans [list]
lappend ans [list set testsuite yes]
lappend ans [list setpath LOADEDMODULES "$module_tron:$module"]
lappend ans [list setpath _LMFILES_ "$modulefile_tron:$modulefile"]
lappend ans [list setpath MODULES_LMCONFLICT "$module&$module_tron"]
set tserr [list [err_conflictf $module $module_tron]]
testouterr_cmd_re "sh" "load --no-auto --force $module" $ans [join $tserr "\n"]

# from this situation where conflict has been forced
setenv_loaded_module [list $module_tron $module $module_troff] [list $modulefile_tron $modulefile $modulefile_troff]
setenv_path_var MODULES_LMCONFLICT "$module&$module_tron"

# unload of a conflicting module
# no reload of the other conflict module as auto_handling is disabled
set ans [list]
lappend ans [list unset testsuite]
lappend ans [list setpath LOADEDMODULES "$module_tron:$module_troff"]
lappend ans [list setpath _LMFILES_ "$modulefile_tron:$modulefile_troff"]
lappend ans [list unsetpath MODULES_LMCONFLICT]
testouterr_cmd_re "sh" "unload --no-auto $module" $ans ""

# unload of the other conflicting module
# no reload of the other conflict module as auto_handling is disabled
set ans [list]
lappend ans [list setpath LOADEDMODULES "$module:$module_troff"]
lappend ans [list setpath _LMFILES_ "$modulefile:$modulefile_troff"]
testouterr_cmd_re "sh" "unload --no-auto $module_tron" $ans $err_trace

set ans [list]
lappend ans [list unsetpath LOADEDMODULES]
lappend ans [list unsetpath _LMFILES_]
lappend ans [list unset testsuite]
lappend ans [list unsetpath MODULES_LMCONFLICT]
testouterr_cmd "sh" "purge" $ans $err_trace

testouterr_cmd_re "sh" "reload" "ERR" $err_unsatreload

# from this situation where conflict has been forced (opposite order)
setenv_loaded_module [list $module $module_tron $module_troff] [list $modulefile $modulefile_tron $modulefile_troff]
setenv_path_var MODULES_LMCONFLICT "$module&$module_tron"

# unload of a conflicting module
# no reload of the other conflict module as auto_handling is disabled
set ans [list]
lappend ans [list unset testsuite]
lappend ans [list setpath LOADEDMODULES "$module_tron:$module_troff"]
lappend ans [list setpath _LMFILES_ "$modulefile_tron:$modulefile_troff"]
lappend ans [list unsetpath MODULES_LMCONFLICT]
testouterr_cmd_re "sh" "unload --no-auto $module" $ans ""

# unload of the other conflicting module
# no reload of the other conflict module as auto_handling is disabled
set ans [list]
lappend ans [list setpath LOADEDMODULES "$module:$module_troff"]
lappend ans [list setpath _LMFILES_ "$modulefile:$modulefile_troff"]
testouterr_cmd_re "sh" "unload --no-auto $module_tron" $ans $err_trace

set ans [list]
lappend ans [list unsetpath LOADEDMODULES]
lappend ans [list unsetpath _LMFILES_]
lappend ans [list unset testsuite]
lappend ans [list unsetpath MODULES_LMCONFLICT]
testouterr_cmd "sh" "purge" $ans $err_trace

testouterr_cmd_re "sh" "reload" "ERR" $err_unsatreload


#
#  Cleanup
#

# restore environment
unsetenv_path_var MODULES_LMCONFLICT
unsetenv_loaded_module

unset err_con
unset err_trace
unset tserr

unset ans

unset modulefile
unset module
unset modulefile_tron
unset module_tron
unset modulefile_troff
unset module_troff
