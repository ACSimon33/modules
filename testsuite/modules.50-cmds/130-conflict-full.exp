##############################################################################
#   Modules Revision 3.0
#   Providing a flexible user environment
#
#   File:		modules.50-cmds/%M%
#   Revision:		%I%
#   First Edition:	1995/12/06
#   Last Mod.:		%U%, %G%
#
#   Authors:		Jens Hamisch, Jens.Hamisch@Strawberry.COM
#
#   Description:	Testuite testsequence
#   Command:		load
#   Modulefiles:	conflict/full, trace/all_on, trace/all_off
#   Sub-Command:
#
#   Comment:	%C{
#			Tests the 'conflict' command using a full qualified
#			module name. This tests the reactions of modulecmd
#			if the conflicting module is load or not and if
#			another module of the same category is load.
#		}C%
#
##############################################################################

#
#  Variables. This test forces a module load command. It will result in the
#    environment variables "_LMFILES_", "LOADEDMODULES" and "testsuite" to
#    be set up
#

set module "conflict/full"
set modulefile "$modpath/$module"

set module_tron "trace/all_on"
set modulefile_tron "$modpath/$module_tron"

set module_troff "trace/all_off"
set modulefile_troff "$modpath/$module_troff"

#
#  Error messages
#

# additional message on Tcl-version as 'module-trace' is not implemented
set err_conflict "$warn_msgs: 'module-trace' command not implemented\n"
append err_conflict "$warn_msgs: $module cannot be loaded due to a conflict.\n"
append err_conflict "HINT: Might try \"module unload trace/all_on\" first."

#
#  The tests
#

lappend ans [list setpath _LMFILES_ $modulefile_tron]
lappend ans [list setpath LOADEDMODULES $module_tron]
lappend ans [list ERR]
testouterr_cmd_re "ALL" "load $module_tron $module" $ans "$err_conflict"

set ans [list]
lappend ans [list setpath LOADEDMODULES "$module_troff:$module"]
lappend ans [list setpath _LMFILES_ "$modulefile_troff:$modulefile"]
lappend ans [list set testsuite yes]
test_cmd_re "ALL" "load $module_troff $module" $ans

set ans [list]
lappend ans [list set testsuite yes]
lappend ans [list setpath LOADEDMODULES $module]
lappend ans [list setpath _LMFILES_ $modulefile]
test_cmd_re "ALL" "load $module" $ans

# check excepted siteconfig file is installed
if {[siteconfig_isStderrTty]} {

# test module load again in force mode when conflicting module has been
# loaded afterward
if { $verbose > 0 } {
    send_user "\tSetup TESTSUITE_ENABLE_SITECONFIG_FORCE = '1'\n"
}
set env(TESTSUITE_ENABLE_SITECONFIG_FORCE) 1
setenv_loaded_module [list $module $module_tron] [list $modulefile $modulefile_tron]

set ans [list]
lappend ans [list set testsuite yes]
lappend ans [list setpath LOADEDMODULES "$module:$module_tron"]
# forced load again has currently some side effect
lappend ans [list setpath _LMFILES_ "(.*)"]
test_cmd_re "sh" "load $module" $ans

# restore environment
if { $verbose > 0 } {
    send_user "\tUnset TESTSUITE_ENABLE_SITECONFIG_FORCE\n"
}
unset env(TESTSUITE_ENABLE_SITECONFIG_FORCE)
unsetenv_loaded_module

} elseif {$verbose > 0} {
   send_user "\tSkip some tests as excepted siteconfig file not installed\n"
}

#
#  Cleanup
#

unset err_conflict

unset ans

unset modulefile
unset module
unset modulefile_tron
unset module_tron
unset modulefile_troff
unset module_troff
