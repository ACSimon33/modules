##############################################################################
#   Modules Revision 3.0
#   Providing a flexible user environment
#
#   File:		modules.70-maint/%M%
#   Revision:		%I%
#   First Edition:	95/12/06
#   Last Mod.:		%U%, %G%
#
#   Authors:		Jens Hamisch, Jens.Hamisch@Strawberry.COM
#
#   Description:	Testuite testsequence
#   Command:		display
#   Modulefiles:	help/2.0, bad
#   Sub-Command:
#
#   Comment:	%C{
#			Tests the module command 'display'
#		}C%
#
##############################################################################

#
#  Test variables
#

set module_1 "help"
set module_2 "NonExistant"
set module_3 "bad"
set module_4 "test"
set module_5 "bad2"

# different behavior than C-version: on Tcl-version 'module-log', 'module-verbosity'
# and 'module-user' commandq are not handled and will always return a warning message
# to inform the user. Moreover 'x-resource' commands are displayed as defined in
# modulefile and not displayed as a 'xrdb' command like on C-version
set out_pat "-------------------------------------------------------------------
$env(TESTSUITEDIR)/modulefiles/help/2.0:

set-alias\tal-testsuite\tps -auxww | grep modulecmd
unset-alias\tal-testsuite
setenv\t\ttestsuite\tyes
append-path\ttestsuite\tno
prepend-path\ttestsuite\tmaybe
remove-path\ttestsuite\tyes
unsetenv\ttestsuite
x-resource\tmy-prog*my-ress\ttrue
WARNING: 'module-user' command not implemented
WARNING: 'module-verbosity' command not implemented
WARNING: 'module-log' command not implemented
WARNING: 'module-trace' command not implemented
system\t\tls
module load\tsetenv/1.0
module-alias\tfoo setenv/1.0
module-version\tfoo foo bar blah
module-whatis\tSome checks for HELP and DISPLAY
-------------------------------------------------------------------"
set out_debug_pat "-------------------------------------------------------------------
$env(TESTSUITEDIR)/modulefiles/help/2.0:

(DEBUG .*)+
set-alias\tal-testsuite\tps -auxww | grep modulecmd
(DEBUG .*)+
unset-alias\tal-testsuite
(DEBUG .*)+
setenv\t\ttestsuite\tyes
(DEBUG .*)+
append-path\ttestsuite\tno
(DEBUG .*)+
prepend-path\ttestsuite\tmaybe
(DEBUG .*)+
remove-path\ttestsuite\tyes
(DEBUG .*)+
unsetenv\ttestsuite
(DEBUG .*)+
x-resource\tmy-prog*my-ress\ttrue
(DEBUG .*)+
WARNING: 'module-user' command not implemented
WARNING: 'module-verbosity' command not implemented
WARNING: 'module-log' command not implemented
(DEBUG .*)+
system\t\tls
(DEBUG .*)+
module load\tsetenv/1.0
(DEBUG .*)+
module-alias\tfoo setenv/1.0
(DEBUG .*)+
module-version\tfoo foo bar blah
(DEBUG .*)+
module-whatis\tSome checks for HELP and DISPLAY
(DEBUG .*)+
-------------------------------------------------------------------"

set out_err "$error_msgs: Unable to locate a modulefile for '$module_2'"
set out_interr "Module ERROR: Occurred in file $env(TESTSUITEDIR)/modulefiles/$module_3/.modulerc:invalid command name \"bad-command\""
set err_csh "/bin/false;"

set out_pat_4 "-------------------------------------------------------------------
$env(TESTSUITEDIR)/modulefiles/test/2.0:

set-alias\tal-testsuite\tps -auxww | grep modulecmd
unset-alias\tal-testsuite
setenv\t\ttestsuite\tyes
append-path\ttestsuite\tno
prepend-path\ttestsuite\tmaybe
remove-path\ttestsuite\tyes
unsetenv\ttestsuite
x-resource\tmy-prog*my-ress\ttrue
system\t\tls
module load\tsetenv/1.0
module-alias\tfoo setenv/1.0
module-version\tfoo foo bar blah
module-whatis\tSome checks for TEST and DISPLAY
-------------------------------------------------------------------"

set out_interr_5 "-------------------------------------------------------------------
$env(TESTSUITEDIR)/modulefiles/$module_5/proc:

setenv\t\ttestsuite\tyes
module-whatis\terroneous module test
Module ERROR: Occurred in file $env(TESTSUITEDIR)/modulefiles/$module_5/proc:invalid command name \"bad-command\""

#
#  The tests
#

testerr_cmd "csh" "display $module_1" "$out_pat"

#
# test debug mode
#

testerr_cmd_re "csh" "--debug display $module_1" "$out_debug_pat"

#
# test exit on error  
#
testouterr_cmd "csh" "display $module_2" "$err_csh" "$out_err"

#
# test with erroneous modulefile
#
testouterr_cmd_re "csh" "display $module_3" "$err_csh" "$out_interr.*"

#
# test with erroneous modulefile in debug mode
#
testouterr_cmd_re "csh" "--debug display $module_3" "$err_csh" "$out_interr.*DEBUG Error: 1 error\\\(s\\\) detected.\$"

#
# test on modulefile with ModuleTest proc defined
#
testerr_cmd "csh" "display $module_4" "$out_pat_4"

#
# test with erroneous ModulesDisplay proc in modulefile
#
testouterr_cmd_re "csh" "display $module_5" "$err_csh" "$out_interr_5.*"


#
#  Cleanup
#

unset err_csh
unset out_err
unset out_interr
unset out_pat
unset out_debug_pat
unset out_pat_4
unset out_interr_5

unset module_1
unset module_2
unset module_3
unset module_4
unset module_5
