##############################################################################
#   Modules Revision 3.0
#   Providing a flexible user environment
#
#   File:		modules.70-maint/%M%
#   Revision:		%I%
#   First Edition:	2017/05/20
#   Last Mod.:		%U%, %G%
#
#   Authors:		Xavier Delaruelle, xavier.delaruelle@cea.fr
#
#   Description:	Testuite testsequence
#   Command:		autoinit
#   Modulefiles:
#   Sub-Command:
#
#   Comment:	%C{
#			Tests the module command 'autoinit'
#		}C%
#
##############################################################################

#
#  Test variables
#

set path_list {}
foreach elt [file split [file join [pwd] $MODULECMD]] {
    if {$elt ne "."} {
        lappend path_list $elt
    }
}
set modulecmd_path [regsub -all "\(\[.+?\]\)" [eval file join $path_list] {\\\1}]
set moduleshome [file dirname $modulecmd_path]

if {[info exists env(TCLSH)]} {
    set tclsh_path $env(TCLSH)
} else {
    set tclsh_path "\\S+tclsh"
}

set out_sh "module\\\(\\\) { eval `$tclsh_path $modulecmd_path sh \\$\\*`; };
(.*;\\n)*MODULESHOME=$moduleshome; export MODULESHOME;(\\n.*;)*"
set out_bash "module\\\(\\\) { eval `$tclsh_path $modulecmd_path bash \\$\\*`; };
(.*;\\n)*MODULESHOME=$moduleshome; export MODULESHOME;(\\n.*;)*"
set out_ksh "module\\\(\\\) { eval `$tclsh_path $modulecmd_path ksh \\$\\*`; };
(.*;\\n)*MODULESHOME=$moduleshome; export MODULESHOME;(\\n.*;)*"
set out_zsh "module\\\(\\\) { eval `$tclsh_path $modulecmd_path zsh \\$\\*`; };
(.*;\\n)*MODULESHOME=$moduleshome; export MODULESHOME;(\\n.*;)*"
set out_csh "if \\\( \\\$\\\?histchars && \\\$\\\?prompt \\\)  alias module 'set _histchars = \\\$histchars; unset histchars; set _prompt=\"\\\$prompt\"; set prompt=\"\"; eval `$tclsh_path $modulecmd_path csh \\\\!\\*`; set _exit=\"\\\$status\";  set histchars = \\\$_histchars; unset _histchars; set prompt=\"\\\$_prompt\"; unset _prompt; test 0 = \\\$_exit' ;
if \\\( \\\$\\\?histchars && \\\! \\\$\\\?prompt \\\)  alias module 'set _histchars = \\\$histchars; unset histchars; eval `$tclsh_path $modulecmd_path csh \\\\!\\*`; set _exit=\"\\\$status\";  set histchars = \\\$_histchars; unset _histchars; test 0 = \\\$_exit' ;
if \\\( \\\! \\\$\\\?histchars && \\\$\\\?prompt \\\)  alias module 'set _prompt=\"\\\$prompt\"; set prompt=\"\"; eval `$tclsh_path $modulecmd_path csh \\\\!\\*`; set _exit=\"\\\$status\";  set prompt=\"\\\$_prompt\";unset _prompt; test 0 = \\\$_exit' ;
if \\\( \\\! \\\$\\\?histchars && \\\! \\\$\\\?prompt \\\)  alias module 'eval `$tclsh_path $modulecmd_path csh \\\\!\\*`' ;
(.*;\\n)*setenv MODULESHOME $moduleshome;(\\n.*;)*"
set out_tcsh "if \\\( \\\$\\\?histchars && \\\$\\\?prompt \\\)  alias module 'set _histchars = \\\$histchars; unset histchars; set _prompt=\"\\\$prompt\"; set prompt=\"\"; eval `$tclsh_path $modulecmd_path tcsh \\\\!\\*`; set _exit=\"\\\$status\";  set histchars = \\\$_histchars; unset _histchars; set prompt=\"\\\$_prompt\"; unset _prompt; test 0 = \\\$_exit' ;
if \\\( \\\$\\\?histchars && \\\! \\\$\\\?prompt \\\)  alias module 'set _histchars = \\\$histchars; unset histchars; eval `$tclsh_path $modulecmd_path tcsh \\\\!\\*`; set _exit=\"\\\$status\";  set histchars = \\\$_histchars; unset _histchars; test 0 = \\\$_exit' ;
if \\\( \\\! \\\$\\\?histchars && \\\$\\\?prompt \\\)  alias module 'set _prompt=\"\\\$prompt\"; set prompt=\"\"; eval `$tclsh_path $modulecmd_path tcsh \\\\!\\*`; set _exit=\"\\\$status\";  set prompt=\"\\\$_prompt\";unset _prompt; test 0 = \\\$_exit' ;
if \\\( \\\! \\\$\\\?histchars && \\\! \\\$\\\?prompt \\\)  alias module 'eval `$tclsh_path $modulecmd_path tcsh \\\\!\\*`' ;
(.*;\\n)*setenv MODULESHOME $moduleshome;(\\n.*;)*"
set out_fish "function module
   eval \\S+tclsh $modulecmd_path fish \\$argv | source -
end
(.*;\\n)*set -xg MODULESHOME $moduleshome;(\\n.*;)*"
set out_tcl "proc module {args} {
   global env;
   set script {};
   if {\\\[catch {set script \\\[eval exec \"$tclsh_path\" \"$modulecmd_path\" \"tcl\" \\\$args\\\] } msg\\\]} {
      puts \\\$msg
   };
   uplevel \\\$script;
}
(.*;\\n)*set env\\\(MODULESHOME\\\) \"$moduleshome\";(\\n.*;)*"
set out_perl "sub module {
   eval `$tclsh_path $modulecmd_path perl \\@_`;
   if\\\(\\$\\@\\\) {
      use Carp;
      confess \"module-error: \\$\\@
\";
   }
   return 1;
}
(.*;\\n)*\\\$ENV{'MODULESHOME'} = '$moduleshome';(\\n.*;)*"
set out_python "import os
import subprocess
def module\\\(command, \\*arguments\\\):
   exec\\\(subprocess\\.Popen\\\(\\\['$tclsh_path', '$modulecmd_path', 'python', command\\\] \\+ list\\\(arguments\\\), stdout=subprocess\\.PIPE\\\)\\.communicate\\\(\\\)\\\[0\\\]\\\)
(.*\\n)*os\\.environ\\\['MODULESHOME'\\\] = '$moduleshome'(\\n.*)*"
set out_ruby "class ENVModule
   def ENVModule.module\\\(\\*args\\\)
      if args\\\[0\\\].kind_of\\?\\\(Array\\\) then
         args = args\\\[0\\\].join\\\(' '\\\)
      else
         args = args.join\\\(' '\\\)
      end
      eval `$tclsh_path $modulecmd_path ruby #{args}`
   end
end
(.*\\n)*ENV\\\['MODULESHOME'\\\] = '$moduleshome'(\\n.*)*"

set err_lisp "$error_msgs: lisp mode autoinit not yet implemented"
set out_cmake "function\\\(module\\\)
   execute_process\\\(COMMAND mktemp -t moduleinit.cmake.XXXXXXXXXXXX
      OUTPUT_VARIABLE tempfile_name\\\)
   execute_process\\\(COMMAND $tclsh_path $modulecmd_path cmake \\\${ARGV}
      OUTPUT_FILE \\\${tempfile_name}\\\)
   if\\\(EXISTS \\\${tempfile_name}\\\)
      include\\\(\\\${tempfile_name}\\\)
      file\\\(REMOVE \\\${tempfile_name}\\\)
   endif\\\(\\\)
endfunction\\\(module\\\)
(.*\\n)*set\\\(ENV{MODULESHOME} \"$moduleshome\"\\\)(\\n.*)*"
set out_r "module <- function\\\(...\\\){
   arglist <- as.list\\\(match.call\\\(\\\)\\\)
   arglist\\\[1\\\] <- 'r'
   args <- paste0\\\(arglist, collapse=' '\\\)
   cmd <- paste\\\('$tclsh_path', '$modulecmd_path', args, sep=' '\\\)
   hndl <- pipe\\\(cmd\\\)
   eval\\\(expr = parse\\\(file=hndl\\\)\\\)
   close\\\(hndl\\\)
   invisible\\\(0\\\)
}
(.*\\n)*Sys.setenv\\\('MODULESHOME'='$moduleshome'\\\)(\\n.*)*"

#
#  test autoinit command for the different shells
#

test_cmd_re "sh" "autoinit" "$out_sh"
test_cmd_re "bash" "autoinit" "$out_bash"
test_cmd_re "ksh" "autoinit" "$out_ksh"
test_cmd_re "zsh" "autoinit" "$out_zsh"
test_cmd_re "csh" "autoinit" "$out_csh"
test_cmd_re "tcsh" "autoinit" "$out_tcsh"
test_cmd_re "fish" "autoinit" "$out_fish"
test_cmd_re "tcl" "autoinit" "$out_tcl"
test_cmd_re "perl" "autoinit" "$out_perl"
test_cmd_re "python" "autoinit" "$out_python"
test_cmd_re "ruby" "autoinit" "$out_ruby"
testouterr_cmd "lisp" "autoinit" "ERR" "$err_lisp"
test_cmd_re "cmake" "autoinit" "$out_cmake"
test_cmd_re "r" "autoinit" "$out_r"

#
#  Cleanup
#

unset path_list
unset modulecmd_path
unset moduleshome
unset out_sh
unset out_bash
unset out_ksh
unset out_zsh
unset out_csh
unset out_tcsh
unset out_fish
unset out_tcl
unset out_perl
unset out_python
unset out_ruby
unset err_lisp
unset out_cmake
unset out_r
