##############################################################################
#   Modules Release Tcl
#   Providing a flexible user environment
#
#   File:		modules.61-coll/%M%
#   Revision:		%I%
#   First Edition:	2016/08/02
#   Last Mod.:		%U%, %G%
#
#   Authors:		Xavier Delaruelle, xavier.delaruelle@cea.fr
#
#   Description:	Testuite testsequence
#   Command:
#   Modulefiles:
#   Sub-Command:
#
#   Comment:	%C{
#			Test the module 'restore' command
#		}C%
#
##############################################################################

set cbadnerrmsg "$error_msgs: Collection $collbadn cannot be found"
set cbadfperrmsg "$error_msgs: Collection $collbadfp cannot be found"
set cbadterrmsg "$error_msgs: Collection $colld (for target \"$colltarget\") cannot be found"
set cderrmsg "load $cdmod4"
set c1errmsg "load $c1mod5\nload $c1mod6"
set c2errmsg "unload $c1mod6\nunload $c1mod5\nunload $cdmod4\nload $c2mod4\nload $c2mod5\nload $c2mod6"
set c1errmsgf2 "unload $c2mod6\nunload $c2mod5\nunload $c2mod4\nload $cdmod4\nload $c1mod5\nload $c1mod6"
set c3errmsg ""
set c4errmsg "unload $c2mod6\nunload $c2mod5\nunload $c2mod4"
set badcontfp "$homewithcoll/.Xresources"
set badcontfperrmsg "$error_msgs: $badcontfp is not a valid collection"


# set HOME to location containing collections
set ORIG_HOME $env(HOME)
if { $verbose > 0 } {
    send_user "\tSetup HOME = $homewithcoll\n"
}
set env(HOME) "$homewithcoll"


#
# test restoring nonexistent collection
#

testouterr_cmd "ALL" "restore $collbadn" "ERR" "$cbadnerrmsg"


#
# test restoring nonexistent collection specified as a filepath
#

testouterr_cmd "ALL" "restore $collbadfp" "ERR" "$cbadfperrmsg"


#
# test showing existent file which is not a collection
#

testouterr_cmd "ALL" "restore $badcontfp" "ERR" "$badcontfperrmsg"


#
# test restoring default collection
#

# setup an empty environment
if { $verbose > 0 } {
    send_user "\tUnset MODULEPATH\n"
}
unset env(MODULEPATH)

lappend ans [list set _LMFILES__modshare "(.*)"]
lappend ans [list set LOADEDMODULES_modshare "(.*)"]
lappend ans "(.*)"
lappend ans [list set MODULEPATH_modshare "(.*)"]
lappend ans "(.*)"
lappend ans [list set _LMFILES_ $cdlmf]
lappend ans [list set LOADEDMODULES $cdlm]
lappend ans "(.*)"
lappend ans "(.*)"
lappend ans [list set MODULEPATH $cdmodpath]

testouterr_cmd_re "ALL" "restore" $ans "$cderrmsg"


#
# test restoring default collection saved with version pinned and with parts
# of this environment already loaded (default version comparison)
#

if { $verbose > 0 } {
    send_user "\tSetup MODULEPATH = $cdmodpath\n"
}
set env(MODULEPATH) "$cdmodpath"
setenv_loaded_module [split $cdlm_part ":"] [split $cdlmf_part ":"]

set ans [list]
lappend ans [list setpath LOADEDMODULES $cdlm]
lappend ans [list setpath _LMFILES_ $cdlmf]

testouterr_cmd_re "sh" "restore" $ans ""


#
# test restoring collection that only adds path to use and mods to load
#

# fake environment state: default collection restored
setenv_loaded_module [split $cdlm ":"] [split $cdlmf ":"]

set ans [list]
lappend ans [list setpath MODULEPATH $c1modpath]
lappend ans [list setpath LOADEDMODULES $c1lm]
lappend ans [list setpath _LMFILES_ $c1lmf]

testouterr_cmd_re "ALL" "restore $coll1" $ans "$c1errmsg"


#
# test restoring exact same collection, nothing should happen
#

# fake environment state: $coll1 collection restored
if { $verbose > 0 } {
    send_user "\tSetup MODULEPATH = $c1modpath\n"
}
set env(MODULEPATH) "$c1modpath"
setenv_loaded_module [split $c1lm ":"] [split $c1lmf ":"]

testouterr_cmd "ALL" "restore $coll1" "OK" ""


#
# test restoring collection unload some modules
# to reload them in correct order
#

set ans [list]
lappend ans [list setpath LOADEDMODULES $c2lm]
lappend ans [list setpath _LMFILES_ $c2lmf]

testouterr_cmd_re "ALL" "restore $coll2" $ans "$c2errmsg"


#
# test restoring collection that reorder used paths
# no change on loaded modules
#

# fake environment state: $coll2 collection restored
if { $verbose > 0 } {
    send_user "\tSetup MODULEPATH = $c2modpath\n"
}
set env(MODULEPATH) "$c2modpath"
setenv_loaded_module [split $c2lm ":"] [split $c2lmf ":"]

set ans [list]
lappend ans [list setpath MODULEPATH $c3modpath]

testouterr_cmd_re "ALL" "restore $coll3" $ans "$c3errmsg"


#
# test restoring collection specified as filepath
#

set ans [list]
lappend ans [list setpath LOADEDMODULES $c1lm]
lappend ans [list setpath _LMFILES_ $c1lmf]

testouterr_cmd_re "ALL" "restore $coll1fp" $ans "$c1errmsgf2"


#
# test restoring collection specified as filepath when
# MODULES_COLLECTION_TARGET is set. target should be ignored
#

# setup environment state
if { $verbose > 0 } {
    send_user "\tSetup MODULES_COLLECTION_TARGET = $colltarget\n"
}
set env(MODULES_COLLECTION_TARGET) "$colltarget"

testouterr_cmd_re "ALL" "restore $coll1fp" $ans "$c1errmsgf2"


#
# test restoring collection not mentionning module to load
# when MODULES_COLLECTION_TARGET set
#

set ans [list]
lappend ans [list unset _LMFILES__modshare]
lappend ans [list unset LOADEDMODULES_modshare]
lappend ans "(.*)"
lappend ans "(.*)"
lappend ans "(.*)"
lappend ans [list unset _LMFILES_]
lappend ans [list unset LOADEDMODULES]
lappend ans "(.*)"

testouterr_cmd_re "ALL" "restore $coll4" $ans "$c4errmsg"


#
# test restoring same collection than before but with a modulepath
# prepended rather appended
#

testouterr_cmd_re "ALL" "restore $coll5fp" $ans "$c4errmsg"


#
# test restoring collection mixing virtual and deep modules spread through
# different modulepaths to check correct default version is restored
#

# restore environment
if { $verbose > 0 } {
    send_user "\tUnset MODULEPATH\n"
}
unset env(MODULEPATH)
unsetenv_loaded_module

set ans [list]
lappend ans [list set testsuite "yes"]
lappend ans [list setpath LOADEDMODULES $c6lm]
lappend ans [list setpath _LMFILES_ $c6lmf]
lappend ans [list setpath MODULEPATH $c6modpath]

testouterr_cmd_re "sh" "restore $coll6" $ans ""


#
# test restoring collection with empty element set in MODULEPATH, LOADEDMODULES
#

# restore environment
if { $verbose > 0 } {
    send_user "\tSetup MODULEPATH = ':'\n"
}
set env(MODULEPATH) ":"
setenv_loaded_module [list {} {}] [list {} {}]

set ans [list]
lappend ans [list set testsuite "yes"]
lappend ans [list setpath LOADEDMODULES "::$c6lm"]
lappend ans [list setpath _LMFILES_ "::$c6lmf"]
# empty dir elements are ignored but stick to the variable, they should be removed
lappend ans [list setpath MODULEPATH "::$c6modpath"]

testouterr_cmd_re "sh" "restore $coll6" $ans ""


#
# test restoring collection with no modulepath and modulefiles loaded as fullpath
#

# setup environment state
if { $verbose > 0 } {
    send_user "\tUnset MODULEPATH\n"
}
unset env(MODULEPATH)
unsetenv_loaded_module

set ans [list]
lappend ans [list set testsuite "yes"]
lappend ans [list setpath LOADEDMODULES $c7lm]
lappend ans [list setpath _LMFILES_ $c7lmf]

testouterr_cmd_re "sh" "restore $coll7fp" $ans ""


#
# test restoring collection with no modulepath and modulefiles loaded as fullpath
# starting with a defined MODULEPATH
#

if { $verbose > 0 } {
    send_user "\tMODULEPATH = '$modpath'\n"
}
set env(MODULEPATH) $modpath

set ans [list]
lappend ans [list set testsuite "yes"]
lappend ans [list setpath LOADEDMODULES $c7lm]
lappend ans [list setpath _LMFILES_ $c7lmf]
lappend ans [list unsetpath MODULEPATH]

testouterr_cmd_re "sh" "restore $coll7fp" $ans ""


#
# test restoring collection with a modulepath and modulefiles loaded as fullpath
#

if { $verbose > 0 } {
    send_user "\tUnset MODULEPATH\n"
}
unset env(MODULEPATH)

set ans [list]
lappend ans [list set testsuite "yes"]
lappend ans [list setpath LOADEDMODULES $c8lm]
lappend ans [list setpath _LMFILES_ $c8lmf]
lappend ans [list setpath MODULEPATH $c8modpath]

testouterr_cmd_re "sh" "restore $coll8fp" $ans ""


#
# test restoring nonexistent default collection when
# MODULES_COLLECTION_TARGET is set
#

testouterr_cmd "ALL" "restore" "ERR" "$cbadterrmsg"


#
# test unsetting HOME
#

if { $verbose > 0 } {
    send_user "\tUnset HOME \n"
}
unset env(HOME)

testouterr_cmd "sh" "restore" "ERR" $nohomeerrmsg

# restore default testsuite home
if { $verbose > 0 } {
    send_user "\tRestore HOME = $ORIG_HOME\n"
}
set env(HOME) $ORIG_HOME
unset ORIG_HOME


#
# test when loaded environment is inconsistent
#

setenv_loaded_module [list foo bar] "/path/to/foo"

testouterr_cmd "sh" "restore $coll8fp" "ERR" "$err_loinconsist\n  LOADEDMODULES=foo bar\n  _LMFILES_=/path/to/foo"


#
# Cleanup
#

# restore environment
# _LMFILES_ and LOADEDMODULES already restored during last test
if { $verbose > 0 } {
    send_user "\tRestore MODULEPATH = $modpath\n"
    send_user "\tRestore MODULES_COLLECTION_TARGET = ''\n"
}
set env(MODULEPATH) $modpath
unset env(MODULES_COLLECTION_TARGET)
unsetenv_loaded_module

unset ans

unset cbadnerrmsg
unset cbadfperrmsg
unset cbadterrmsg
unset cderrmsg
unset c1errmsg
unset c2errmsg
unset c1errmsgf2
unset c3errmsg
unset c4errmsg
unset badcontfp
unset badcontfperrmsg

