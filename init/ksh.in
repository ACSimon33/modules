# only redirect module from stderr to stdout in interactive mode
# to avoid breaking non interactive session (scp, sftp, etc)
if [[ $- =~ i ]]; then
   _moduleraw() { eval `@TCLSH@ @libexecdir@/modulecmd.tcl ksh $*`; }
   module() { _moduleraw $* 2>&1 ; }
else
   module() { eval `@TCLSH@ @libexecdir@/modulecmd.tcl ksh $*`; }
fi

# setup ENV variables to get module defined in sub-shells (works for 'sh'
# and 'ksh' in interactive mode and 'sh' (zsh-compat), 'bash' and 'ksh'
# (zsh-compat) in non-interactive mode.
ENV=@initdir@/profile.sh; export ENV
BASH_ENV=@initdir@/bash; export BASH_ENV

# setup FPATH to get module defined in 'ksh' interactive and non-interactive
# sub-shells. only set in ksh init script to avoid side effect default FPATH
# set for 'zsh' shell when it starts.
if [[ ! ":$FPATH:" =~ ':@initdir@/ksh-functions:' ]]; then
   FPATH+="${FPATH:+:}@initdir@/ksh-functions"; export FPATH
fi

MODULESHOME=@prefix@; export MODULESHOME

@setbinpath@if [[ ! ":$PATH:" =~ ':@bindir@:' ]]; then
@setbinpath@   PATH=@bindir@${PATH:+:}$PATH; export PATH
@setbinpath@fi
@setbinpath@
@setmanpath@manpath=`manpath 2>/dev/null`
@setmanpath@if [[ ! ":$manpath:" =~ ':@mandir@:' ]]; then
@setmanpath@   MANPATH=@mandir@${manpath:+:}$manpath; export MANPATH
@setmanpath@fi
@setmanpath@
if [ "${MODULEPATH:-}" = '' ]; then
   if [ -r @initdir@/.modulespath ]; then
      MODULEPATH=`sed -n 's/[ 	#].*$//; /./H; $ { x; s/^\n//; s/\n/:/g; p; }' \
         @initdir@/.modulespath`; export MODULEPATH
   else
      MODULEPATH=; export MODULEPATH
   fi
fi

if [ "${LOADEDMODULES:-}" = '' ]; then
   LOADEDMODULES=; export LOADEDMODULES
fi

# load modulerc only if module environment is empty
if [ -r @initdir@/modulerc -a "$MODULEPATH" = '' -a "$LOADEDMODULES" = '' ]; then
   module source @initdir@/modulerc
fi
