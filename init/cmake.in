@compatversion@# set module command in accordance with active version
@compatversion@if("$ENV{MODULES_USE_COMPAT_VERSION}" STREQUAL "1")
@compatversion@function(module)
@compatversion@   execute_process(COMMAND mktemp -t moduleinit.cmake.XXXXXXXXXXXX
@compatversion@      OUTPUT_VARIABLE tempfile_name)
@compatversion@   execute_process(COMMAND @libexecdir@/modulecmd-compat cmake ${ARGV}
@compatversion@      OUTPUT_FILE ${tempfile_name})
@compatversion@   if(EXISTS ${tempfile_name})
@compatversion@      include(${tempfile_name})
@compatversion@      file(REMOVE ${tempfile_name})
@compatversion@   endif()
@compatversion@endfunction(module)
@compatversion@else()
function(module)
   execute_process(COMMAND mktemp -t moduleinit.cmake.XXXXXXXXXXXX
      OUTPUT_VARIABLE tempfile_name)
   execute_process(COMMAND @TCLSH@ @libexecdir@/modulecmd.tcl cmake ${ARGV}
      OUTPUT_FILE ${tempfile_name})
   if(EXISTS ${tempfile_name})
      include(${tempfile_name})
      file(REMOVE ${tempfile_name})
   endif()
endfunction(module)
@compatversion@endif()

set(ENV{MODULESHOME} "@prefix@")

if(NOT DEFINED ENV{MODULEPATH})
   if(EXISTS @initdir@/.modulespath)
      execute_process(COMMAND sed -n "s/[ 	#].*$//; /./H; $ { x; s/^\\n//; s/\\n/:/g; p; }" @initdir@/.modulespath
         OUTPUT_VARIABLE modulespath)
      set(ENV{MODULEPATH} "${modulespath}")
   else()
      set(ENV{MODULEPATH} "")
   endif()
endif()

if(NOT DEFINED ENV{LOADEDMODULES})
   set(ENV{LOADEDMODULES} "")
endif()

# load modulerc only if module environment is empty
@notcompatversion@if(EXISTS @initdir@/modulerc AND "$ENV{MODULEPATH}" STREQUAL "" AND "$ENV{LOADEDMODULES}" STREQUAL "")
@compatversion@if(NOT "$ENV{MODULES_USE_COMPAT_VERSION}" STREQUAL "1" AND EXISTS @initdir@/modulerc AND "$ENV{MODULEPATH}" STREQUAL "" AND "$ENV{LOADEDMODULES}" STREQUAL "")
   module(source @initdir@/modulerc)
endif()
