# define module command and surrounding initial environment (default value
# for MODULESHOME, MODULEPATH, LOADEDMODULES and parse of init/.modulespath)
eval `@TCLSH@ @libexecdir@/modulecmd.tcl sh autoinit`

@compatversion@# redefine module command if compat version has been activated
@compatversion@if [ "$MODULES_USE_COMPAT_VERSION" = '1' ]; then
@compatversion@   if [ -t 1 ]; then
@compatversion@      _moduleraw() { eval `@libexecdir@/modulecmd-compat sh $*`; }
@compatversion@   else
@compatversion@      module() { eval `@libexecdir@/modulecmd-compat sh $*`; }
@compatversion@   fi
@compatversion@fi
@compatversion@
# if sh is bash, export functions to get them defined in sub-shells
if [ "${BASH:-}" != '' ]; then
   if [ -t 1 ]; then
      export -f _moduleraw
   fi
   export -f module
fi

@compatversion@# define function to switch between C and Tcl versions of Modules
@compatversion@switchml() {
@compatversion@   swfound=1
@compatversion@   if [ "$MODULES_USE_COMPAT_VERSION" = '1' ]; then
@compatversion@      swname='main'
@compatversion@      if [ -e @libexecdir@/modulecmd.tcl ]; then
@compatversion@         swfound=0
@compatversion@         unset MODULES_USE_COMPAT_VERSION
@compatversion@      fi
@compatversion@   else
@compatversion@      swname='compatibility'
@compatversion@      if [ -e @libexecdir@/modulecmd-compat ]; then
@compatversion@         swfound=0
@compatversion@         MODULES_USE_COMPAT_VERSION=1; export MODULES_USE_COMPAT_VERSION
@compatversion@      fi
@compatversion@   fi
@compatversion@
@compatversion@   # switch version only if command found
@compatversion@   if [ $swfound -eq 0 ]; then
@compatversion@      echo "Switching to Modules $swname version"
@compatversion@      . @initdir@/sh
@compatversion@   else
@compatversion@      echo "Cannot switch to Modules $swname version, command not found"
@compatversion@      return 1
@compatversion@   fi
@compatversion@}
@compatversion@if [ "${BASH:-}" != '' ]; then
@compatversion@   export -f switchml
@compatversion@fi
@compatversion@
# setup ENV variables to get module defined in sub-shells (works for 'sh'
# and 'ksh' in interactive mode and 'sh' (zsh-compat), 'bash' and 'ksh'
# (zsh-compat) in non-interactive mode.
ENV=@initdir@/profile.sh; export ENV
BASH_ENV=@initdir@/bash; export BASH_ENV

@setbinpath@case ":$PATH:" in
@setbinpath@   *:@bindir@:*) ;;
@setbinpath@   *) PATH=@bindir@${PATH:+:}$PATH; export PATH
@setbinpath@esac
@setbinpath@
@setmanpath@manpath=`manpath 2>/dev/null`
@setmanpath@case ":$manpath:" in
@setmanpath@   *:@mandir@:*) ;;
@setmanpath@   *) MANPATH=@mandir@${manpath:+:}$manpath; export MANPATH
@setmanpath@esac
