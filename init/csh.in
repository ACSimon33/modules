if ( $?histchars ) then
   set histchar   = `echo $histchars | cut -c1`
   set _histchars = $histchars
   set prefix     = 'unset histchars;'
   set postfix    = 'set histchars = $_histchars;'
else
   set histchar = \!
   set prefix   = ''
   set postfix  = ''
endif

if ( $?prompt ) then
   set prefix  = "$prefix"'set _prompt="$prompt";set prompt="";'
   set postfix = "$postfix"'set prompt="$_prompt";unset _prompt;'
endif

if ( $?noglob ) then
   set prefix  = "$prefix"'set noglob;'
   set postfix = "$postfix"'unset noglob;'
endif

set postfix = "set _exit="'$status'"; $postfix; test 0 = "'$_exit;'

@compatversion@# clarify compat version is not enabled for below tests
@compatversion@if ( ! $?MODULE_USE_COMPAT_VERSION ) then
@compatversion@   setenv MODULE_USE_COMPAT_VERSION 0
@compatversion@endif
@compatversion@
@notcompatversion@alias module $prefix'eval `@TCLSH@ @libexecdir@/modulecmd.tcl @SHELLNAME@ '$histchar'*`; '$postfix
@compatversion@# set module command in accordance with active version
@compatversion@if ( "$MODULE_USE_COMPAT_VERSION" == '1' ) then
@compatversion@   alias module $prefix'eval `@libexecdir@/modulecmd-compat @SHELLNAME@ '$histchar'*`; '$postfix
@compatversion@else
@compatversion@   alias module $prefix'eval `@TCLSH@ @libexecdir@/modulecmd.tcl @SHELLNAME@ '$histchar'*`; '$postfix
@compatversion@endif
unset _histchar
unset prefix
unset postfix

@compatversion@# define function to switch between C and Tcl versions of Modules
@compatversion@if ( "`alias switchml`" == '' ) then
@compatversion@   alias switchml 'set swfound=1; \
@compatversion@      if ( ! $?MODULE_USE_COMPAT_VERSION ) setenv MODULE_USE_COMPAT_VERSION 0; \
@compatversion@      if ( "$MODULE_USE_COMPAT_VERSION" == "1" ) set swname="main"; \
@compatversion@      if ( "$MODULE_USE_COMPAT_VERSION" == "1" && -e @libexecdir@/modulecmd.tcl ) set swfound=0; \
@compatversion@      if ( "$MODULE_USE_COMPAT_VERSION" != "1" ) set swname="compatibility"; \
@compatversion@      if ( "$MODULE_USE_COMPAT_VERSION" != "1" && -e @libexecdir@/modulecmd-compat ) set swfound=0; \
@compatversion@      if ( $swfound == 0 && $swname == "main" ) setenv MODULE_USE_COMPAT_VERSION 0; \
@compatversion@      if ( $swfound == 0 && $swname == "compatibility" ) setenv MODULE_USE_COMPAT_VERSION 1; \
@compatversion@      if ( $swfound == 0 ) echo "Switching to Modules $swname version"; \
@compatversion@      if ( $swfound == 0 ) source @initdir@/@SHELLNAME@; \
@compatversion@      if ( $swfound != 0 ) echo "Cannot switch to Modules $swname version, command not found"; \
@compatversion@      unset swfound swname;'
@compatversion@endif
@compatversion@
if ( $?tcsh && $?prompt && -r @initdir@/tcsh_completion ) then
@compatversion@if ( "$MODULE_USE_COMPAT_VERSION" != '1' ) then
   source @initdir@/tcsh_completion
@compatversion@else
@compatversion@   # no completion support on compat version
@compatversion@   uncomplete module
@compatversion@endif
endif

# setup ENV variables to get module defined in sub-shells (works for 'sh'
# and 'ksh' in interactive mode and 'sh' (zsh-compat), 'bash' and 'ksh'
# (zsh-compat) in non-interactive mode.
setenv ENV @initdir@/profile.sh
setenv BASH_ENV @initdir@/bash

setenv MODULESHOME @prefix@

@setbinpath@if ( ":${PATH}:" !~ '*:@bindir@:*' ) then
@setbinpath@   if ( "$PATH" == '' ) then
@setbinpath@      setenv PATH @bindir@
@setbinpath@   else
@setbinpath@      setenv PATH "@bindir@:$PATH"
@setbinpath@   endif
@setbinpath@endif
@setbinpath@
@setmanpath@if ( $?MANPATH ) then
@setmanpath@   set manpath = $MANPATH
@setmanpath@else
@setmanpath@   set manpath = `manpath`
@setbinpath@endif
@setmanpath@if ( ":${manpath}:" !~ '*:@mandir@:*' ) then
@setmanpath@   if ( "$manpath" == '' ) then
@setmanpath@      setenv MANPATH @mandir@
@setmanpath@   else
@setmanpath@      setenv MANPATH "@mandir@:$manpath"
@setmanpath@   endif
@setmanpath@endif
@setmanpath@unset manpath
@setmanpath@
if (! $?MODULEPATH ) then
   if ( -r @initdir@/.modulespath ) then
      setenv MODULEPATH `sed -n 's/[ 	#].*$//; /./H; $ { x; s/^\n//; s/\n/:/g; p; }' @initdir@/.modulespath`
   else
      setenv MODULEPATH ''
   endif
endif

if (! $?LOADEDMODULES ) then
   setenv LOADEDMODULES ''
endif

# load modulerc only if module environment is empty
@notcompatversion@if ( -r @initdir@/modulerc && "$MODULEPATH" == '' && "$LOADEDMODULES" == '' ) then
@compatversion@if ( "$MODULE_USE_COMPAT_VERSION" != '1' && -r @initdir@/modulerc && "$MODULEPATH" == '' && "$LOADEDMODULES" == '' ) then
   module source @initdir@/modulerc
endif
