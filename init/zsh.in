# only redirect module from stderr to stdout in interactive mode
# to avoid breaking non interactive session (scp, sftp, etc)
if [[ $- =~ i ]]; then
@notcompatversion@   _moduleraw() { eval `@TCLSH@ @libexecdir@/modulecmd.tcl zsh $*`; }
@compatversion@   # set module command in accordance with active version
@compatversion@   if [ "$MODULE_USE_COMPAT_VERSION" = '1' ]; then
@compatversion@      _moduleraw() { eval `@libexecdir@/modulecmd-compat zsh $*`; }
@compatversion@   else
@compatversion@      _moduleraw() { eval `@TCLSH@ @libexecdir@/modulecmd.tcl zsh $*`; }
@compatversion@   fi
   module() { _moduleraw $* 2>&1 ; }
else
@notcompatversion@   module() { eval `@TCLSH@ @libexecdir@/modulecmd.tcl zsh $*`; }
@compatversion@   if [ "$MODULE_USE_COMPAT_VERSION" = '1' ]; then
@compatversion@      module() { eval `@libexecdir@/modulecmd-compat zsh $*`; }
@compatversion@   else
@compatversion@      module() { eval `@TCLSH@ @libexecdir@/modulecmd.tcl zsh $*`; }
@compatversion@   fi
fi

@compatversion@# define function to switch between C and Tcl versions of Modules
@compatversion@switchml() {
@compatversion@   typeset swfound=1
@compatversion@   if [ "$MODULE_USE_COMPAT_VERSION" = '1' ]; then
@compatversion@      typeset swname='main'
@compatversion@      if [ -e @libexecdir@/modulecmd.tcl ]; then
@compatversion@         typeset swfound=0
@compatversion@         unset MODULE_USE_COMPAT_VERSION
@compatversion@      fi
@compatversion@   else
@compatversion@      typeset swname='compatibility'
@compatversion@      if [ -e @libexecdir@/modulecmd-compat ]; then
@compatversion@         typeset swfound=0
@compatversion@         MODULE_USE_COMPAT_VERSION=1; export MODULE_USE_COMPAT_VERSION
@compatversion@      fi
@compatversion@   fi
@compatversion@
@compatversion@   # switch version only if command found
@compatversion@   if [ $swfound -eq 0 ]; then
@compatversion@      echo "Switching to Modules $swname version"
@compatversion@      source @initdir@/zsh
@compatversion@   else
@compatversion@      echo "Cannot switch to Modules $swname version, command not found"
@compatversion@      return 1
@compatversion@   fi
@compatversion@}
@compatversion@
# setup ENV variables to get module defined in sub-shells (works for 'sh'
# and 'ksh' in interactive mode and 'sh' (zsh-compat), 'bash' and 'ksh'
# (zsh-compat) in non-interactive mode.
ENV=@initdir@/profile.sh; export ENV
BASH_ENV=@initdir@/bash; export BASH_ENV

@compatversion@if [ "$MODULE_USE_COMPAT_VERSION" != '1' ]; then
# setup FPATH to put module completion at hand in case zsh completion enabled
if [[ ! ":$FPATH:" =~ ':@initdir@/zsh-functions:' ]]; then
   FPATH=@initdir@/zsh-functions${FPATH:+:}$FPATH; export FPATH
fi
@compatversion@# no completion support on compat version
@compatversion@elif typeset -f compdef >/dev/null; then
@compatversion@   compdef -d module
@compatversion@fi

MODULESHOME=@prefix@; export MODULESHOME

@setbinpath@if [[ ! ":$PATH:" =~ ':@bindir@:' ]]; then
@setbinpath@   PATH=@bindir@${PATH:+:}$PATH; export PATH
@setbinpath@fi
@setbinpath@
@setmanpath@manpath=`manpath 2>/dev/null`
@setmanpath@if [[ ! ":$manpath:" =~ ':@mandir@:' ]]; then
@setmanpath@   MANPATH=@mandir@${manpath:+:}$manpath; export MANPATH
@setmanpath@fi
@setmanpath@
if [ "${MODULEPATH:-}" = '' ]; then
   if [ -r @initdir@/.modulespath ]; then
      MODULEPATH=`sed -n 's/[ 	#].*$//; /./H; $ { x; s/^\n//; s/\n/:/g; p; }' \
         @initdir@/.modulespath`; export MODULEPATH
   else
      MODULEPATH=; export MODULEPATH
   fi
fi

if [ "${LOADEDMODULES:-}" = '' ]; then
   LOADEDMODULES=; export LOADEDMODULES
fi

# load modulerc only if module environment is empty
@notcompatversion@if [ -r @initdir@/modulerc -a "$MODULEPATH" = '' -a "$LOADEDMODULES" = '' ]; then
@compatversion@if [ "$MODULE_USE_COMPAT_VERSION" != '1' -a -r @initdir@/modulerc -a "$MODULEPATH" = '' -a "$LOADEDMODULES" = '' ]; then
   module source @initdir@/modulerc
fi
